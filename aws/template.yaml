AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Subscriber Migration Portal - Serverless API (No Flask)'

Globals:
  Function:
    Timeout: 30
    MemorySize: 512
    Runtime: python3.11
    Environment:
      Variables:
        STAGE: !Ref Stage
        SUBSCRIBER_TABLE: !Ref SubscriberTable
        AUDIT_LOG_TABLE: !Ref AuditLogTable
        MIGRATION_JOBS_TABLE: !Ref MigrationJobsTable
        UPLOAD_BUCKET: !Ref UploadBucket
        JWT_SECRET: !Ref JwtSecret
        CORS_ORIGINS: !Ref CorsOrigins
    Layers:
      - !Ref CommonLibsLayer

Parameters:
  Stage:
    Type: String
    Default: 'dev'
    AllowedValues: ['dev', 'staging', 'prod']
    Description: 'Deployment stage'
  
  CorsOrigins:
    Type: String
    Default: 'https://localhost:3000,https://yourdomain.com'
    Description: 'Allowed CORS origins'
  
  JwtSecret:
    Type: String
    NoEcho: true
    MinLength: 32
    Description: 'JWT signing secret (32+ characters)'

Resources:
  # ======================
  # LAMBDA LAYER (Shared Libraries)
  # ======================
  CommonLibsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub '${AWS::StackName}-common-libs'
      Description: 'Common libraries for all Lambda functions'
      ContentUri: layers/common/
      CompatibleRuntimes:
        - python3.11
      RetentionPolicy: Retain

  # ======================
  # API GATEWAY
  # ======================
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub '${AWS::StackName}-api'
      StageName: !Ref Stage
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization,X-Requested-With'"
        AllowOrigin: !Sub "'${CorsOrigins}'"
        AllowCredentials: true
      Auth:
        DefaultAuthorizer: LambdaTokenAuthorizer
        Authorizers:
          LambdaTokenAuthorizer:
            FunctionArn: !GetAtt AuthorizerFunction.Arn
            Identity:
              Headers:
                - Authorization
      ThrottleConfig:
        RateLimit: 1000
        BurstLimit: 2000
      UsagePlan:
        CreateUsagePlan: PER_API
        Description: 'Usage plan for Subscriber Portal API'
        Quota:
          Limit: 10000
          Period: DAY
        Throttle:
          RateLimit: 100
          BurstLimit: 200

  # ======================
  # AUTHENTICATION FUNCTIONS
  # ======================
  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/authorizer/
      Handler: handler.lambda_handler
      Description: 'JWT Token Authorizer'
      Environment:
        Variables:
          USERS_SECRET_ARN: !Ref UsersSecret

  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/auth/
      Handler: login.lambda_handler
      Description: 'User authentication and JWT generation'
      Events:
        LoginApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /auth/login
            Method: POST
            Auth:
              Authorizer: NONE
      Environment:
        Variables:
          USERS_SECRET_ARN: !Ref UsersSecret

  LogoutFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/auth/
      Handler: logout.lambda_handler
      Description: 'User logout and token blacklisting'
      Events:
        LogoutApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /auth/logout
            Method: POST

  # ======================
  # DASHBOARD FUNCTIONS
  # ======================
  DashboardStatsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/dashboard/
      Handler: stats.lambda_handler
      Description: 'Get dashboard statistics'
      Events:
        DashboardApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /dashboard/stats
            Method: GET

  HealthCheckFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/dashboard/
      Handler: health.lambda_handler
      Description: 'System health check'
      Events:
        HealthApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /health
            Method: GET
            Auth:
              Authorizer: NONE

  # ======================
  # SUBSCRIBER MANAGEMENT FUNCTIONS
  # ======================
  GetSubscribersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/subscribers/
      Handler: get_subscribers.lambda_handler
      Description: 'Get paginated list of subscribers'
      Events:
        GetSubscribersApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /subscribers
            Method: GET

  GetSubscriberFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/subscribers/
      Handler: get_subscriber.lambda_handler
      Description: 'Get single subscriber by ID'
      Events:
        GetSubscriberApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /subscribers/{id}
            Method: GET

  CreateSubscriberFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/subscribers/
      Handler: create_subscriber.lambda_handler
      Description: 'Create new subscriber'
      Events:
        CreateSubscriberApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /subscribers
            Method: POST

  UpdateSubscriberFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/subscribers/
      Handler: update_subscriber.lambda_handler
      Description: 'Update existing subscriber'
      Events:
        UpdateSubscriberApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /subscribers/{id}
            Method: PUT

  DeleteSubscriberFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/subscribers/
      Handler: delete_subscriber.lambda_handler
      Description: 'Delete subscriber'
      Events:
        DeleteSubscriberApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /subscribers/{id}
            Method: DELETE

  SearchSubscribersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/subscribers/
      Handler: search_subscribers.lambda_handler
      Description: 'Search subscribers with filters'
      Events:
        SearchSubscribersApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /subscribers/search
            Method: GET

  # ======================
  # MIGRATION FUNCTIONS
  # ======================
  GetMigrationJobsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/migration/
      Handler: get_jobs.lambda_handler
      Description: 'Get migration jobs list'
      Events:
        GetJobsApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /migration/jobs
            Method: GET

  CreateMigrationJobFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/migration/
      Handler: create_job.lambda_handler
      Description: 'Create new migration job'
      Events:
        CreateJobApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /migration/jobs
            Method: POST

  FileUploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/migration/
      Handler: upload_file.lambda_handler
      Description: 'Handle file uploads for migration'
      Timeout: 60
      MemorySize: 1024
      Events:
        UploadApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /migration/upload
            Method: POST

  ProcessMigrationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/migration/
      Handler: process_migration.lambda_handler
      Description: 'Process uploaded migration files'
      Timeout: 900
      MemorySize: 2048
      Events:
        S3Upload:
          Type: S3
          Properties:
            Bucket: !Ref UploadBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: 'uploads/'

  # ======================
  # ANALYTICS FUNCTIONS
  # ======================
  AnalyticsMetricsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/analytics/
      Handler: metrics.lambda_handler
      Description: 'Get analytics metrics'
      Events:
        MetricsApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /analytics/metrics
            Method: GET

  # ======================
  # USER MANAGEMENT FUNCTIONS
  # ======================
  GetUsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/users/
      Handler: get_users.lambda_handler
      Description: 'Get users list (admin only)'
      Events:
        GetUsersApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /users
            Method: GET

  # ======================
  # DYNAMODB TABLES
  # ======================
  SubscriberTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-subscribers'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: uid
          AttributeType: S
        - AttributeName: msisdn
          AttributeType: S
        - AttributeName: status
          AttributeType: S
      KeySchema:
        - AttributeName: uid
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: msisdn-index
          KeySchema:
            - AttributeName: msisdn
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: status-index
          KeySchema:
            - AttributeName: status
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: Service
          Value: SubscriberPortal
        - Key: Environment
          Value: !Ref Stage

  AuditLogTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-audit-logs'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
        - AttributeName: user
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: timestamp-index
          KeySchema:
            - AttributeName: timestamp
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: user-index
          KeySchema:
            - AttributeName: user
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      SSESpecification:
        SSEEnabled: true

  MigrationJobsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-migration-jobs'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: job_id
          AttributeType: S
        - AttributeName: status
          AttributeType: S
        - AttributeName: created_at
          AttributeType: S
      KeySchema:
        - AttributeName: job_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: status-created-index
          KeySchema:
            - AttributeName: status
              KeyType: HASH
            - AttributeName: created_at
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      SSESpecification:
        SSEEnabled: true

  # ======================
  # S3 BUCKETS
  # ======================
  UploadBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-uploads-${Stage}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
          - Id: TransitionToIA
            Status: Enabled
            Transitions:
              - StorageClass: STANDARD_IA
                TransitionInDays: 30
          - Id: TransitionToGlacier
            Status: Enabled
            Transitions:
              - StorageClass: GLACIER
                TransitionInDays: 90
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST, DELETE]
            AllowedOrigins: [!Ref CorsOrigins]
            MaxAge: 3000

  # ======================
  # SECRETS MANAGER
  # ======================
  UsersSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${AWS::StackName}-users'
      Description: 'User credentials for authentication'
      SecretString: !Sub |
        {
          "admin": {
            "password_hash": "pbkdf2:sha256:260000$salt$hash",
            "role": "admin",
            "permissions": ["read", "write", "admin"]
          },
          "operator": {
            "password_hash": "pbkdf2:sha256:260000$salt$hash",
            "role": "operator",
            "permissions": ["read", "write"]
          }
        }

  # ======================
  # IAM ROLES & POLICIES
  # ======================
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-lambda-execution-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                Resource:
                  - !GetAtt SubscriberTable.Arn
                  - !GetAtt AuditLogTable.Arn
                  - !GetAtt MigrationJobsTable.Arn
                  - !Sub '${SubscriberTable.Arn}/index/*'
                  - !Sub '${AuditLogTable.Arn}/index/*'
                  - !Sub '${MigrationJobsTable.Arn}/index/*'
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub '${UploadBucket}/*'
                  - !GetAtt UploadBucket.Arn
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Ref UsersSecret
        - PolicyName: CloudWatchLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - cloudwatch:PutMetricData
                Resource: '*'

  # ======================
  # CLOUDWATCH ALARMS
  # ======================
  HighErrorRateAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${AWS::StackName}-high-error-rate'
      AlarmDescription: 'High error rate in API Gateway'
      MetricName: 4XXError
      Namespace: AWS/ApiGateway
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 2
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ApiName
          Value: !Sub '${AWS::StackName}-api'
      AlarmActions:
        - !Ref AlertsTopic

  AlertsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub '${AWS::StackName}-alerts'
      DisplayName: 'Subscriber Portal Alerts'

Outputs:
  ApiEndpoint:
    Description: 'API Gateway endpoint URL'
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Stage}'
    Export:
      Name: !Sub '${AWS::StackName}-api-endpoint'

  UploadBucketName:
    Description: 'S3 bucket for file uploads'
    Value: !Ref UploadBucket
    Export:
      Name: !Sub '${AWS::StackName}-upload-bucket'

  SubscriberTableName:
    Description: 'DynamoDB table for subscribers'
    Value: !Ref SubscriberTable
    Export:
      Name: !Sub '${AWS::StackName}-subscriber-table'
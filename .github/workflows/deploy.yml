name: Deploy Subscriber Migration Portal

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Check AWS Account ID
        run: |
          echo "Checking AWS identity..."
          aws sts get-caller-identity
      
      # ---------------------
      # Step 1: Build & Deploy Backend
      # ---------------------
      - name: Setup Python
        uses: actions/setup-python@v5 
        with:
          python-version: '3.11' 

      - name: Install and Package backend dependencies
        run: |
          cd backend
          pip install --no-cache-dir -r requirements.txt -t .
          zip -r backend.zip . -x "*.pyc" "__pycache__/*" "*.git*"
          
      - name: Deploy CloudFormation Stack
        run: |
          cd aws
          aws cloudformation deploy \
            --template-file cloudformation.yaml \
            --stack-name subscriber-migration-stack-v3 \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --parameter-overrides DomainName=${{ secrets.DOMAIN_NAME }}

      # --- THIS STEP NOW GETS YOUR NEW API ID (mqdj8pm9v9) ---
      - name: Get CloudFormation Outputs
        id: cfn_outputs
        run: |
          STACK_NAME="subscriber-migration-stack-v3"
          
          FUNCTION_NAME=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='BackendLambdaName'].OutputValue" --output text)
          SUBSCRIBER_TABLE=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='SubscriberTableName'].OutputValue" --output text)
          AUDIT_TABLE=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='AuditLogTableName'].OutputValue" --output text)
          
          # Get the NEW API ID and URL from the stack
          API_ID=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='BackendApiId'].OutputValue" --output text)
          API_URL=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --query "Stacks[0].Outputs[?OutputKey=='BackendApiUrl'].OutputValue" --output text)

          echo "function_name=$FUNCTION_NAME" >> $GITHUB_OUTPUT
          echo "subscriber_table=$SUBSCRIBER_TABLE" >> $GITHUB_OUTPUT
          echo "audit_table=$AUDIT_TABLE" >> $GITHUB_OUTPUT
          echo "api_id=$API_ID" >> $GITHUB_OUTPUT # Pass the new ID to the next step
          
          echo "::notice:: NEW API URL: $API_URL" # Print the new URL
          echo "New API ID: $API_ID"

      - name: Update backend Lambda code
        run: |
          aws lambda update-function-code \
            --function-name ${{ steps.cfn_outputs.outputs.function_name }} \
            --zip-file fileb://backend/backend.zip

      - name: Wait for Lambda function update to complete
        if: steps.cfn_outputs.outputs.function_name != ''
        run: |
          aws lambda wait function-updated \
            --function-name ${{ steps.cfn_outputs.outputs.function_name }}
          echo "Function update complete."

      - name: Update Lambda Environment Variables
        if: steps.cfn_outputs.outputs.function_name != ''
        run: |
          aws lambda update-function-configuration \
            --function-name ${{ steps.cfn_outputs.outputs.function_name }} \
            --environment "Variables={ \
              FRONTEND_DOMAIN_URL=https.portal.${{ secrets.DOMAIN_NAME }}, \
              SUBSCRIBER_TABLE_NAME=${{ steps.cfn_outputs.outputs.subscriber_table }}, \
              AUDIT_LOG_TABLE_NAME=${{ steps.cfn_outputs.outputs.audit_table }} \
            }"

      # --- THIS STEP NOW USES YOUR NEW API ID ---
      - name: Deploy API Gateway Stage
        env:
          API_ID: ${{ steps.cfn_outputs.outputs.api_id }} # Uses the new ID from CloudFormation
        run: |
          echo "Starting deployment for API Gateway: $API_ID"
          DEPLOYMENT_ID=$(aws apigateway create-deployment \
            --rest-api-id $API_ID \
            --description "CI/CD code update $(date +%s)" \
            --query 'id' \
            --output text --region us-east-1)
          
          if [ -z "$DEPLOYMENT_ID" ]; then
            echo "Failed to create deployment"
            exit 1
          fi
          echo "Created Deployment ID: $DEPLOYMENT_ID"
          
          aws apigateway update-stage \
            --rest-api-id $API_ID \
            --stage-name prod \
            --patch-operations op='replace',path='/deploymentId',value=$DEPLOYMENT_ID \
            --region us-east-1
          
          echo "API Gateway stage 'prod' updated to deployment $DEPLOYMENT_ID"

      # ---------------------
      # Step 2: Build & Deploy Frontend
      # ---------------------
      - name: Install frontend dependencies
        run: |
          cd frontend
          CI=false npm install

      - name: Build frontend
        run: |
          cd frontend
          CI=false npm run build

      - name: Deploy frontend to S3
        run: |
          aws s3 sync frontend/build/ s3://subscriber-portal-${{ secrets.AWS_ACCOUNT_ID }}-us-east-1 --delete

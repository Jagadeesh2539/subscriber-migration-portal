name: Deploy Production-Ready Portal with Legacy Integration

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      deploy_component:
        description: 'Component to deploy'
        required: false
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'frontend'
          - 'backend'
          - 'test-legacy'

env:
  AWS_DEFAULT_REGION: us-east-1
  # Your exact AWS resources
  FRONTEND_BUCKET: subscriber-migration-stack-prod-frontend
  BACKEND_LAMBDA: subscriber-migration-stack-prod-BackendLambda-pw0yiCxXyN3J
  API_GATEWAY_ID: hsebznxeu6
  MIGRATION_PROCESSOR: subscriber-migration-stac-MigrationProcessorFuncti-oteIVmgXQXfK
  MIGRATION_UPLOAD_BUCKET: subscriber-migration-stack-prod-migration-uploads
  
  # DynamoDB Tables
  SUBSCRIBER_TABLE: subscriber-table
  AUDIT_TABLE: audit-log-table
  MIGRATION_JOBS_TABLE: migration-jobs-table
  
  # Legacy Database
  LEGACY_DB_SECRET_ARN: arn:aws:secretsmanager:us-east-1:144395889420:secret:subscriber-legacy-db-secret-qWXjZz
  LEGACY_DB_HOST: subscriber-migration-legacydb.cwd6wssgy4kr.us-east-1.rds.amazonaws.com
  LEGACY_DB_PORT: 3306
  LEGACY_DB_NAME: legacydb
  
  # VPC Configuration
  VPC_ID: vpc-0464c90a3983a76f0
  SUBNET_1: subnet-0486bac3ab443b26a
  SUBNET_2: subnet-04f0b194e3ba708e7
  RDS_SECURITY_GROUP: sg-0c23391a113692a51

jobs:
  deploy-frontend:
    runs-on: ubuntu-latest
    if: github.event.inputs.deploy_component == 'all' || github.event.inputs.deploy_component == 'frontend' || github.event.inputs.deploy_component == ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package.json

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Install dependencies and build enhanced frontend
        run: |
          cd frontend
          echo "📦 Installing dependencies for enhanced features..."
          npm ci
          
          # Ensure recharts is installed for analytics
          npm install recharts
          
          echo "⚙️ Setting up production environment..."
          cat > .env.production << EOF
          REACT_APP_API_BASE_URL=https://${{ env.API_GATEWAY_ID }}.execute-api.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com/prod
          REACT_APP_MIGRATION_UPLOAD_BUCKET=${{ env.MIGRATION_UPLOAD_BUCKET }}
          REACT_APP_VERSION=2.0.0-production
          REACT_APP_LEGACY_ENABLED=true
          EOF
          
          echo "🔨 Building enhanced frontend with all new features..."
          npm run build
          
          echo "✅ Frontend build completed"

      - name: Deploy enhanced frontend to S3
        run: |
          cd frontend
          echo "🚀 Deploying enhanced frontend to S3..."
          
          # Clear existing files
          echo "Clearing existing files..."
          aws s3 rm s3://${{ env.FRONTEND_BUCKET }}/ --recursive
          
          # Deploy new build with proper cache headers
          echo "Deploying static assets with long cache..."
          aws s3 sync build/ s3://${{ env.FRONTEND_BUCKET }}/ \
            --cache-control "public, max-age=31536000, immutable" \
            --exclude "*.html" --exclude "service-worker.js" --exclude "manifest.json"
          
          echo "Deploying HTML and dynamic assets with short cache..."
          aws s3 sync build/ s3://${{ env.FRONTEND_BUCKET }}/ \
            --cache-control "public, max-age=0, must-revalidate" \
            --include "*.html" --include "service-worker.js" --include "manifest.json"
          
          echo "✅ Enhanced frontend deployed to S3"
          echo "🌐 Frontend URL: http://${{ env.FRONTEND_BUCKET }}.s3-website-${{ env.AWS_DEFAULT_REGION }}.amazonaws.com/"

  deploy-backend:
    runs-on: ubuntu-latest
    if: github.event.inputs.deploy_component == 'all' || github.event.inputs.deploy_component == 'backend' || github.event.inputs.deploy_component == ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Package production-ready backend
        run: |
          cd backend
          echo "📦 Packaging production-ready backend with legacy integration..."
          
          # Install all dependencies
          pip install --no-cache-dir -r requirements.txt -t .
          
          # Use production-ready backend as main handler
          cp app_production_ready.py lambda_function.py
          
          # Ensure legacy client is included
          cp legacy_db_enhanced.py legacy_db_client.py
          
          echo "📁 Creating deployment package..."
          zip -r ../production-backend.zip . \
            -x "*.pyc" "__pycache__/*" "*.git*" \
               "app.py" "app_enhanced.py" "app_enterprise.py" \
               "*.md" "Dockerfile" ".gitignore" \
               "migration -backup.py" "*.log"
          
          cd ..
          echo "📊 Package size: $(du -sh production-backend.zip | cut -f1)"
          echo "✅ Production backend packaged"

      - name: Deploy production backend to Lambda
        run: |
          echo "🚀 Deploying production backend to AWS Lambda..."
          
          # Update Lambda function code
          echo "📤 Uploading code to Lambda function: ${{ env.BACKEND_LAMBDA }}"
          aws lambda update-function-code \
            --function-name ${{ env.BACKEND_LAMBDA }} \
            --zip-file fileb://production-backend.zip
          
          echo "⏳ Waiting for code update to complete..."
          aws lambda wait function-updated --function-name ${{ env.BACKEND_LAMBDA }}
          
          echo "⚙️ Configuring Lambda environment for production..."
          aws lambda update-function-configuration \
            --function-name ${{ env.BACKEND_LAMBDA }} \
            --environment '{
              "Variables": {
                "SUBSCRIBER_TABLE_NAME": "${{ env.SUBSCRIBER_TABLE }}",
                "AUDIT_LOG_TABLE_NAME": "${{ env.AUDIT_TABLE }}",
                "MIGRATION_JOBS_TABLE_NAME": "${{ env.MIGRATION_JOBS_TABLE }}",
                "MIGRATION_UPLOAD_BUCKET_NAME": "${{ env.MIGRATION_UPLOAD_BUCKET }}",
                "LEGACY_DB_SECRET_ARN": "${{ env.LEGACY_DB_SECRET_ARN }}",
                "LEGACY_DB_HOST": "${{ env.LEGACY_DB_HOST }}",
                "LEGACY_DB_PORT": "${{ env.LEGACY_DB_PORT }}",
                "LEGACY_DB_NAME": "${{ env.LEGACY_DB_NAME }}",
                "FLASK_ENV": "production",
                "VERSION": "2.0.0-production-ready",
                "PROVISIONING_MODES": "legacy,cloud,dual_prov"
              }
            }'
          
          echo "⏳ Waiting for configuration update to complete..."
          aws lambda wait function-updated --function-name ${{ env.BACKEND_LAMBDA }}
          
          echo "✅ Production backend deployed with legacy integration"

      - name: Update API Gateway deployment
        run: |
          echo "🔄 Updating API Gateway with enhanced backend..."
          
          # Create new deployment
          DEPLOYMENT_ID=$(aws apigateway create-deployment \
            --rest-api-id ${{ env.API_GATEWAY_ID }} \
            --description "Production Portal with Legacy Integration $(date +%Y%m%d-%H%M%S)" \
            --query 'id' --output text)
          
          echo "📋 Created deployment: $DEPLOYMENT_ID"
          
          # Update prod stage
          aws apigateway update-stage \
            --rest-api-id ${{ env.API_GATEWAY_ID }} \
            --stage-name prod \
            --patch-operations op=replace,path=/deploymentId,value=$DEPLOYMENT_ID
          
          echo "✅ API Gateway updated with production backend"

  test-legacy-connection:
    runs-on: ubuntu-latest
    if: github.event.inputs.deploy_component == 'all' || github.event.inputs.deploy_component == 'test-legacy' || github.event.inputs.deploy_component == ''
    needs: [deploy-backend]
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Test legacy database connectivity
        run: |
          echo "🔍 Testing legacy database connectivity..."
          
          # Test API endpoint for legacy health
          API_URL="https://${{ env.API_GATEWAY_ID }}.execute-api.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com/prod"
          
          echo "⏳ Waiting 30s for API Gateway propagation..."
          sleep 30
          
          echo "🏥 Testing general health endpoint..."
          HEALTH_RESPONSE=$(curl -s "$API_URL/api/health" | jq -r '.status' 2>/dev/null || echo "failed")
          echo "Health Status: $HEALTH_RESPONSE"
          
          echo "🗄️ Testing legacy database connection..."
          LEGACY_TEST=$(curl -s "$API_URL/api/legacy/test" | jq -r '.status' 2>/dev/null || echo "failed")
          echo "Legacy DB Status: $LEGACY_TEST"
          
          if [ "$HEALTH_RESPONSE" = "healthy" ] || [ "$HEALTH_RESPONSE" = "degraded" ]; then
            echo "✅ API Gateway health check passed"
          else
            echo "❌ API Gateway health check failed"
            echo "Full response:"
            curl -v "$API_URL/api/health" || echo "Request failed"
          fi
          
          if [ "$LEGACY_TEST" = "connected" ]; then
            echo "✅ Legacy database connection test passed"
          else
            echo "⚠️ Legacy database connection test failed (may need VPC configuration)"
            echo "Full response:"
            curl -v "$API_URL/api/legacy/test" || echo "Request failed"
          fi

  comprehensive-health-check:
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend, test-legacy-connection]
    if: always()
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Run comprehensive system tests
        run: |
          API_URL="https://${{ env.API_GATEWAY_ID }}.execute-api.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com/prod"
          FRONTEND_URL="http://${{ env.FRONTEND_BUCKET }}.s3-website-${{ env.AWS_DEFAULT_REGION }}.amazonaws.com"
          
          echo "🧪 Running comprehensive system tests..."
          echo "📍 API URL: $API_URL"
          echo "📍 Frontend URL: $FRONTEND_URL"
          
          # Wait for full propagation
          echo "⏳ Waiting 45s for full AWS propagation..."
          sleep 45
          
          # Test API endpoints
          echo "1️⃣ Testing API health..."
          API_HEALTH=$(curl -s -w "\n%{http_code}" "$API_URL/api/health" | tail -n1)
          echo "   API Health Status: $API_HEALTH"
          
          echo "2️⃣ Testing authentication..."
          LOGIN_TEST=$(curl -s -X POST "$API_URL/api/auth/login" \
            -H "Content-Type: application/json" \
            -d '{"username":"admin","password":"Admin@123"}' \
            -w "\n%{http_code}" | tail -n1)
          echo "   Login Test Status: $LOGIN_TEST"
          
          echo "3️⃣ Testing legacy database connection..."
          LEGACY_DB_TEST=$(curl -s "$API_URL/api/legacy/test" | jq -r '.status' 2>/dev/null || echo "failed")
          echo "   Legacy DB Status: $LEGACY_DB_TEST"
          
          echo "4️⃣ Testing system statistics..."
          STATS_TEST=$(curl -s -w "\n%{http_code}" "$API_URL/api/dashboard/stats" | tail -n1)
          echo "   Stats Endpoint Status: $STATS_TEST"
          
          echo "5️⃣ Testing frontend accessibility..."
          FRONTEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$FRONTEND_URL")
          echo "   Frontend Status: $FRONTEND_STATUS"
          
          # Summary
          echo ""
          echo "📋 Deployment Summary:"
          echo "   API Gateway: $([ "$API_HEALTH" = "200" ] && echo "✅ Healthy" || echo "❌ Issues ($API_HEALTH)")"
          echo "   Authentication: $([ "$LOGIN_TEST" = "200" ] && echo "✅ Working" || echo "❌ Issues ($LOGIN_TEST)")"
          echo "   Legacy Database: $([ "$LEGACY_DB_TEST" = "connected" ] && echo "✅ Connected" || echo "⚠️ Connection Issues")"
          echo "   Statistics API: $([ "$STATS_TEST" = "200" ] && echo "✅ Working" || echo "❌ Issues ($STATS_TEST)")"
          echo "   Frontend: $([ "$FRONTEND_STATUS" = "200" ] && echo "✅ Accessible" || echo "❌ Issues ($FRONTEND_STATUS)")"
          
          # Overall status
          if [ "$API_HEALTH" = "200" ] && [ "$FRONTEND_STATUS" = "200" ] && [ "$LOGIN_TEST" = "200" ]; then
            echo ""
            echo "🎉 DEPLOYMENT SUCCESSFUL!"
            echo "🌐 Your enhanced portal is now live at: $FRONTEND_URL"
            echo "🔑 Login with: admin/Admin@123 (Full access to all features)"
            echo "⚡ Features: Provisioning Modes (Legacy/Cloud/Dual), Migration Management, Bulk Operations, Analytics"
            echo "📊 New: Real-time monitoring, comprehensive statistics, job cancel/copy functionality"
          else
            echo ""
            echo "⚠️ PARTIAL DEPLOYMENT - Some components may need attention"
            echo "Check the individual test results above"
            if [ "$LEGACY_DB_TEST" != "connected" ]; then
              echo "💡 Legacy DB Issue: Lambda may need VPC configuration to reach RDS"
            fi
          fi

  setup-instructions:
    runs-on: ubuntu-latest
    needs: [comprehensive-health-check]
    if: always()
    steps:
      - name: Display setup completion and next steps
        run: |
          echo ""
          echo "🎯 DEPLOYMENT COMPLETED - Next Steps:"
          echo ""
          echo "1️⃣ Access your enhanced portal:"
          echo "   🌐 http://${{ env.FRONTEND_BUCKET }}.s3-website-${{ env.AWS_DEFAULT_REGION }}.amazonaws.com/"
          echo ""
          echo "2️⃣ Test accounts available:"
          echo "   👑 Admin: admin/Admin@123 (Full system access)"
          echo "   ⚙️ Operator: operator/Operator@123 (Operations access)"
          echo "   👁️ Guest: guest/Guest@123 (Read-only access)"
          echo ""
          echo "3️⃣ New features now live:"
          echo "   📊 Dashboard: Real-time system statistics"
          echo "   ⚙️ Provisioning: Legacy/Cloud/Dual provisioning modes"
          echo "   🔄 Migration: Job management with cancel/pause/resume"
          echo "   🗂️ Bulk Operations: Mass deletion and audit tools"
          echo "   📈 Analytics: Comprehensive system analytics"
          echo "   📡 Monitoring: Real-time system health monitoring"
          echo ""
          echo "4️⃣ For full legacy database functionality:"
          echo "   🔧 Ensure Lambda VPC configuration:"
          echo "      - VPC: ${{ env.VPC_ID }}"
          echo "      - Subnets: ${{ env.SUBNET_1 }}, ${{ env.SUBNET_2 }}"
          echo "      - Security Group: Allow outbound to RDS on port 3306"
          echo "   🔐 Update RDS Security Group:"
          echo "      - Add inbound rule: MySQL (3306) from Lambda Security Group"
          echo ""
          echo "5️⃣ Test legacy functionality:"
          echo "   📝 In portal: Go to Provisioning → Select 'Legacy Mode'"
          echo "   ✏️ Create a test subscriber and verify it appears in MySQL"
          echo "   🔍 Run Bulk Audit to compare legacy vs cloud data"
          echo ""
          echo "🎉 Your enterprise-grade subscriber migration portal is ready!"
          echo "📚 Check DEPLOYMENT_GUIDE.md for detailed setup instructions"

  manual-vpc-instructions:
    runs-on: ubuntu-latest
    if: github.event.inputs.deploy_component == 'all' || github.event.inputs.deploy_component == ''
    needs: [setup-instructions]
    steps:
      - name: Display VPC configuration instructions
        run: |
          echo ""
          echo "🔧 IMPORTANT: Manual VPC Configuration Required for Full Legacy Integration"
          echo ""
          echo "The Lambda function needs VPC access to reach your RDS instance."
          echo "Complete these steps in AWS Console:"
          echo ""
          echo "1️⃣ Create Lambda Security Group:"
          echo "   - Go to: EC2 → Security Groups → Create"
          echo "   - Name: lambda-backend-sg"
          echo "   - VPC: ${{ env.VPC_ID }}"
          echo "   - Outbound: All traffic (0.0.0.0/0) - or just MySQL (3306) to RDS SG"
          echo ""
          echo "2️⃣ Update RDS Security Group:"
          echo "   - Go to: EC2 → Security Groups → ${{ env.RDS_SECURITY_GROUP }}"
          echo "   - Add Inbound Rule: MySQL/Aurora (3306) from lambda-backend-sg"
          echo ""
          echo "3️⃣ Configure Lambda VPC:"
          echo "   - Go to: Lambda → ${{ env.BACKEND_LAMBDA }} → Configuration → VPC"
          echo "   - VPC: ${{ env.VPC_ID }}"
          echo "   - Subnets: ${{ env.SUBNET_1 }}, ${{ env.SUBNET_2 }}"
          echo "   - Security Groups: lambda-backend-sg"
          echo ""
          echo "4️⃣ Verify Secrets Manager access:"
          echo "   - Ensure Lambda role has secretsmanager:GetSecretValue permission"
          echo "   - Secret ARN: ${{ env.LEGACY_DB_SECRET_ARN }}"
          echo ""
          echo "✅ After VPC configuration, legacy mode will be fully functional!"
          echo "🧪 Test by creating a subscriber in 'Legacy Mode' from the portal UI"
          echo ""
          echo "📞 If you need help with VPC setup, check the AWS documentation or contact support."
          echo "🔗 Useful links:"
          echo "   - Lambda VPC: https://docs.aws.amazon.com/lambda/latest/dg/configuration-vpc.html"
          echo "   - RDS Security Groups: https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Overview.RDSSecurityGroups.html"
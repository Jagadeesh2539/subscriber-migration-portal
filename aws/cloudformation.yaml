AWSTemplateFormatVersion: '2010-09-09'
Description: 'Subscriber Migration Portal - Security Hardened with Least Privilege IAM + VPC Endpoints (S3 notifications configured post-deploy)'

Parameters:
  Environment:
    Type: String
    Default: 'prod'
    AllowedValues: ['dev', 'staging', 'prod']

  FrontendDomain:
    Type: String
    Default: ''

  LegacyDbUsername:
    Type: String
    Default: 'admin'
    NoEcho: true

  LegacyDbPassword:
    Type: String
    NoEcho: true
    MinLength: 8

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.1.0/24'
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.2.0/24'
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.3.0/24'
      AvailabilityZone: !Select [0, !GetAZs '']

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.4.0/24'
      AvailabilityZone: !Select [1, !GetAZs '']

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  NATGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NATGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Lambda SG'
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'RDS SG'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref LambdaSecurityGroup

  LegacyDbSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${AWS::StackName}-legacy-db-secret'
      SecretString: !Sub |
        {"username": "${LegacyDbUsername}", "password": "${LegacyDbPassword}", "engine": "mysql", "host": "${LegacyDatabase.Endpoint.Address}", "port": 3306, "database": "legacydb"}

  LegacyDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: 'Subnet group'
      SubnetIds: [!Ref PrivateSubnet1, !Ref PrivateSubnet2]

  LegacyDatabase:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Snapshot
    Properties:
      DBInstanceClass: 'db.t3.micro'
      Engine: 'mysql'
      EngineVersion: '8.0.35'
      AllocatedStorage: 20
      StorageType: 'gp2'
      StorageEncrypted: true
      DBName: 'legacydb'
      MasterUsername: !Ref LegacyDbUsername
      MasterUserPassword: !Ref LegacyDbPassword
      DBSubnetGroupName: !Ref LegacyDBSubnetGroup
      VPCSecurityGroups: [!Ref RDSSecurityGroup]
      MultiAZ: false
      PubliclyAccessible: false

  SubscriberTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: SubscriberId
          AttributeType: S
      KeySchema:
        - AttributeName: SubscriberId
          KeyType: HASH

  AuditLogTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  MigrationJobsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: JobId
          AttributeType: S
      KeySchema:
        - AttributeName: JobId
          KeyType: HASH

  LoggingBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: LogDeliveryWrite

  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      WebsiteConfiguration:
        IndexDocument: 'index.html'
        ErrorDocument: 'error.html'
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingBucket
        LogFilePrefix: 'frontend-access/'

  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: ['s3:GetObject']
            Resource: !Sub '${FrontendBucket}/*'

  MigrationUploadBucket:
    Type: AWS::S3::Bucket
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
    # NotificationConfiguration removed to avoid CFN circular dependency; set via workflow post-deploy

  BackendLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: [dynamodb:GetItem,dynamodb:PutItem,dynamodb:UpdateItem,dynamodb:DeleteItem,dynamodb:Query,dynamodb:Scan]
                Resource: [!GetAtt SubscriberTable.Arn, !GetAtt AuditLogTable.Arn, !GetAtt MigrationJobsTable.Arn]
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: [secretsmanager:GetSecretValue]
                Resource: !Ref LegacyDbSecret
        - PolicyName: S3AccessRestricted
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: [s3:GetObject,s3:PutObject]
                Resource:
                  - !Sub 'arn:aws:s3:::${MigrationUploadBucket}'
                  - !Sub 'arn:aws:s3:::${MigrationUploadBucket}/*'

  BackendLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.11
      Handler: lambda_function.lambda_handler
      Code:
        ZipFile: |
          def lambda_handler(event, context):
            return {'statusCode':200,'body':'placeholder'}
      Role: !GetAtt BackendLambdaRole.Arn
      Timeout: 30
      MemorySize: 512
      VpcConfig:
        SecurityGroupIds: [!Ref LambdaSecurityGroup]
        SubnetIds: [!Ref PrivateSubnet1, !Ref PrivateSubnet2]
      Environment:
        Variables:
          SUBSCRIBER_TABLE_NAME: !Ref SubscriberTable
          AUDIT_LOG_TABLE_NAME: !Ref AuditLogTable
          MIGRATION_JOBS_TABLE_NAME: !Ref MigrationJobsTable
          MIGRATION_UPLOAD_BUCKET_NAME: !Ref MigrationUploadBucket
          LEGACY_DB_SECRET_ARN: !Ref LegacyDbSecret
          LEGACY_DB_HOST: !GetAtt LegacyDatabase.Endpoint.Address

  MigrationProcessorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: MigrationDynamoS3Restricted
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: [dynamodb:GetItem,dynamodb:PutItem,dynamodb:UpdateItem,dynamodb:Query,dynamodb:Scan]
                Resource: [!GetAtt SubscriberTable.Arn, !GetAtt MigrationJobsTable.Arn]
              - Effect: Allow
                Action: [s3:GetObject,s3:PutObject]
                Resource:
                  - !Sub 'arn:aws:s3:::${MigrationUploadBucket}'
                  - !Sub 'arn:aws:s3:::${MigrationUploadBucket}/*'
              - Effect: Allow
                Action: [secretsmanager:GetSecretValue]
                Resource: !Ref LegacyDbSecret

  MigrationProcessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.11
      Handler: app.lambda_handler
      Code:
        ZipFile: |
          def lambda_handler(event, context):
            return {'statusCode':200,'body':'processor placeholder'}
      Role: !GetAtt MigrationProcessorRole.Arn
      Timeout: 180
      MemorySize: 512
      VpcConfig:
        SecurityGroupIds: [!Ref LambdaSecurityGroup]
        SubnetIds: [!Ref PrivateSubnet1, !Ref PrivateSubnet2]
      Environment:
        Variables:
          SUBSCRIBERS_TABLE_NAME: !Ref SubscriberTable
          MIGRATION_JOBS_TABLE_NAME: !Ref MigrationJobsTable
          REPORT_BUCKET_NAME: !Ref MigrationUploadBucket
          LEGACY_DB_SECRET_ARN: !Ref LegacyDbSecret
          LEGACY_DB_HOST: !GetAtt LegacyDatabase.Endpoint.Address

  # Permission for S3 to invoke Lambda (notification configured post-deploy)
  S3InvokeMigrationProcessor:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MigrationProcessorFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt MigrationUploadBucket.Arn

  # VPC Gateway Endpoints
  S3VPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcEndpointType: Gateway
      RouteTableIds: [!Ref PrivateRouteTable]

  DynamoDBVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.dynamodb'
      VpcEndpointType: Gateway
      RouteTableIds: [!Ref PrivateRouteTable]

Outputs:
  MigrationUploadBucketName:
    Value: !Ref MigrationUploadBucket
  MigrationProcessorArn:
    Value: !GetAtt MigrationProcessorFunction.Arn

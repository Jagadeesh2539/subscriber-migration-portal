AWSTemplateFormatVersion: "2010-09-09"
Description: Production Subscriber Migration Portal with Development Mode Toggle and optional external VPC usage

Parameters:
  DomainName:
    Type: String
    Default: ""
    Description: "Optional domain name"
  LegacyDBPassword:
    Type: String
    Description: "Aurora MySQL password (min 8 chars)"
    NoEcho: true
    AllowedPattern: ".{8,}"
    ConstraintDescription: "Must be at least 8 characters"
  DevelopmentMode:
    Type: String
    Default: "false"
    AllowedValues: ["true", "false"]
    Description: "Skip Aurora for ~3-5 min deploys (vs ~8-10 min with Aurora)"
  ExistingVPCId:
    Type: AWS::EC2::VPC::Id
    Default: ""
    Description: "ID of an existing VPC to deploy into. Leave empty to create a new one."

Conditions:
  CreateDatabase: !Equals [!Ref DevelopmentMode, "false"]
  CreateNewVPC: !Equals [!Ref ExistingVPCId, ""]

Mappings:
  RegionShort:
    us-east-1: { Code: use1 }
    us-west-2: { Code: usw2 }
    us-east-2: { Code: use2 }
    eu-west-1: { Code: euw1 }
    eu-central-1: { Code: euc1 }
    ap-south-1: { Code: aps1 }

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Condition: CreateNewVPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - { Key: Name, Value: !Sub "${AWS::StackName}-VPC" }
        - { Key: Environment, Value: !If [CreateDatabase, "Production", "Development"] }

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !If [CreateNewVPC, !Ref VPC, !Ref ExistingVPCId]
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags: [{ Key: Name, Value: !Sub "${AWS::StackName}-Pub-1" }]

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !If [CreateNewVPC, !Ref VPC, !Ref ExistingVPCId]
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags: [{ Key: Name, Value: !Sub "${AWS::StackName}-Pub-2" }]

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !If [CreateNewVPC, !Ref VPC, !Ref ExistingVPCId]
      CidrBlock: 10.0.10.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags: [{ Key: Name, Value: !Sub "${AWS::StackName}-Priv-1" }]

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !If [CreateNewVPC, !Ref VPC, !Ref ExistingVPCId]
      CidrBlock: 10.0.11.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags: [{ Key: Name, Value: !Sub "${AWS::StackName}-Priv-2" }]

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Condition: CreateNewVPC
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: CreateNewVPC
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachment
    Condition: CreateNewVPC
    Properties: { Domain: vpc }
  
  NatGateway:
    Type: AWS::EC2::NatGateway
    Condition: CreateNewVPC
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: CreateNewVPC
    Properties: { VpcId: !Ref VPC }
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachment
    Condition: CreateNewVPC
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateNewVPC
    Properties: { SubnetId: !Ref PublicSubnet1, RouteTableId: !Ref PublicRouteTable }
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateNewVPC
    Properties: { SubnetId: !Ref PublicSubnet2, RouteTableId: !Ref PublicRouteTable }

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: CreateNewVPC
    Properties: { VpcId: !Ref VPC }
  PrivateRoute:
    Type: AWS::EC2::Route
    Condition: CreateNewVPC
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateNewVPC
    Properties: { SubnetId: !Ref PrivateSubnet1, RouteTableId: !Ref PrivateRouteTable }
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateNewVPC
    Properties: { SubnetId: !Ref PrivateSubnet2, RouteTableId: !Ref PrivateRouteTable }

# [Rest of the template unchanged with previous fixes applied]


name: 🚀 Prod-Only Deployment with Step Functions Orchestration

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_DEFAULT_REGION: us-east-1
  STACK_NAME: subscriber-migration-portal-prod
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  validate:
    name: 🔍 Validate Architecture
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install validation tools
        run: pip install aws-sam-cli boto3 jq
      - name: Validate SAM Template
        run: |
          set -euo pipefail
          cd aws
          sam validate --template template.yaml --region ${{ env.AWS_DEFAULT_REGION }}

  discover-infrastructure:
    name: 🔍 Discover Existing VPC and Subnets
    runs-on: ubuntu-latest
    needs: validate
    outputs:
      vpc-id: ${{ steps.discover.outputs.vpc_id }}
      private-subnet-1: ${{ steps.discover.outputs.private_subnet_1 }}
      private-subnet-2: ${{ steps.discover.outputs.private_subnet_2 }}
      public-subnet-1: ${{ steps.discover.outputs.public_subnet_1 }}
    steps:
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      - name: 🔍 Auto-discover VPC and Subnets
        id: discover
        run: |
          set -euo pipefail
          VPC_ID=$(aws ec2 describe-vpcs --filters "Name=is-default,Values=true" --query 'Vpcs[0].VpcId' --output text 2>/dev/null || echo None)
          if [[ "$VPC_ID" == "None" ]]; then
            VPC_ID=$(aws ec2 describe-vpcs --query 'Vpcs[0].VpcId' --output text 2>/dev/null || echo None)
          fi
          if [[ "$VPC_ID" == "None" ]]; then
            echo "❌ No VPC found"; exit 1
          fi
          PRIVATE_SUBNETS=($(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" --query 'Subnets[?!MapPublicIpOnLaunch].SubnetId' --output text || echo ""))
          PRIVATE_1=${PRIVATE_SUBNETS[0]:-""}
          PRIVATE_2=${PRIVATE_SUBNETS[1]:-""}
          if [[ -z "$PRIVATE_1" || -z "$PRIVATE_2" ]]; then
            echo "❌ Need 2 private subnets"; exit 1
          fi
          echo "vpc_id=$VPC_ID" >> $GITHUB_OUTPUT
          echo "private_subnet_1=$PRIVATE_1" >> $GITHUB_OUTPUT
          echo "private_subnet_2=$PRIVATE_2" >> $GITHUB_OUTPUT
          echo "public_subnet_1=" >> $GITHUB_OUTPUT

  deploy:
    name: 🏗️ Deploy Infrastructure with Existing VPC
    runs-on: ubuntu-latest
    needs: [validate, discover-infrastructure]
    environment: production
    outputs:
      api-endpoint: ${{ steps.out.outputs.api_endpoint }}
      schema-function-name: ${{ steps.out.outputs.schema_function_name }}
    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: 🔥 Detect and cleanup failed/rollback stacks BEFORE deploy
        run: |
          set -euo pipefail
          STACK="${{ env.STACK_NAME }}"
          
          # Check if stack exists
          if ! aws cloudformation describe-stacks --stack-name "$STACK" >/dev/null 2>&1; then
            echo "✅ No existing stack found"
          else
            STATUS=$(aws cloudformation describe-stacks --stack-name "$STACK" --query 'Stacks[0].StackStatus' --output text)
            echo "📊 Current stack status: $STATUS"
            case "$STATUS" in
              ROLLBACK_COMPLETE|ROLLBACK_FAILED|CREATE_FAILED|DELETE_FAILED|UPDATE_ROLLBACK_COMPLETE|UPDATE_ROLLBACK_FAILED)
                echo "🗑️ Stack in bad state ($STATUS) - deleting..."
                aws cloudformation delete-stack --stack-name "$STACK"
                echo "⏳ Waiting for stack deletion..."
                aws cloudformation wait stack-delete-complete --stack-name "$STACK" 2>/dev/null || true
                echo "✅ Stack deleted"
                ;;
              CREATE_COMPLETE|UPDATE_COMPLETE)
                echo "✅ Stack is healthy - proceeding with update"
                ;;
            esac
          fi
          
          echo "\n🧹 Cleaning up orphaned resources for: $STACK"
          
          # 1. RDS Subnet Groups
          echo "🔍 Checking for orphaned RDS subnet groups..."
          for subnet_group in $(aws rds describe-db-subnet-groups \
            --query "DBSubnetGroups[?contains(DBSubnetGroupName, '$STACK')].DBSubnetGroupName" \
            --output text 2>/dev/null || true); do
            echo "  🗑️ Deleting RDS subnet group: $subnet_group"
            aws rds delete-db-subnet-group --db-subnet-group-name "$subnet_group" 2>/dev/null || true
          done
          
          # 2. RDS Instances
          echo "🔍 Checking for orphaned RDS instances..."
          for db in $(aws rds describe-db-instances \
            --query "DBInstances[?contains(DBInstanceIdentifier, '$STACK')].DBInstanceIdentifier" \
            --output text 2>/dev/null || true); do
            echo "  🗑️ Deleting RDS instance: $db"
            aws rds delete-db-instance \
              --db-instance-identifier "$db" \
              --skip-final-snapshot \
              --delete-automated-backups 2>/dev/null || true
          done
          
          # 3. Secrets Manager
          echo "🔍 Checking for orphaned secrets..."
          for secret in $(aws secretsmanager list-secrets \
            --query 'SecretList[].Name' --output text | tr '\t' '\n' | grep "$STACK" 2>/dev/null || true); do
            echo "  🗑️ Deleting secret: $secret"
            aws secretsmanager delete-secret \
              --secret-id "$secret" \
              --force-delete-without-recovery 2>/dev/null || true
          done
          
          # 4. S3 Buckets
          echo "🔍 Checking for orphaned S3 buckets..."
          for bucket in $(aws s3api list-buckets \
            --query 'Buckets[].Name' --output text | tr '\t' '\n' | grep "$STACK" 2>/dev/null || true); do
            echo "  🗑️ Emptying and deleting bucket: $bucket"
            aws s3 rm "s3://$bucket" --recursive 2>/dev/null || true
            aws s3 rb "s3://$bucket" --force 2>/dev/null || true
          done
          
          # 5. VPC Endpoints (best-effort via tag lookups)
          echo "🔍 Checking for orphaned VPC endpoints..."
          for vpce in $(aws ec2 describe-vpc-endpoints --query 'VpcEndpoints[].VpcEndpointId' --output text 2>/dev/null || true); do
            tags=$(aws ec2 describe-vpc-endpoints --vpc-endpoint-ids "$vpce" --query 'VpcEndpoints[0].Tags[?Key==`aws:cloudformation:stack-name`].Value' --output text 2>/dev/null || echo "")
            if echo "$tags" | grep -q "$STACK"; then
              echo "  🗑️ Deleting VPC endpoint: $vpce"
              aws ec2 delete-vpc-endpoints --vpc-endpoint-ids "$vpce" 2>/dev/null || true
            fi
          done
          
          # 6. Security Groups (except default)
          echo "🔍 Checking for orphaned security groups..."
          for sg in $(aws ec2 describe-security-groups \
            --query 'SecurityGroups[?GroupName!=`default`].[GroupId,Tags]' --output text 2>/dev/null | awk '{print $1}' || true); do
            name=$(aws ec2 describe-security-groups --group-ids "$sg" --query 'SecurityGroups[0].GroupName' --output text 2>/dev/null || echo "")
            if echo "$name" | grep -q "$STACK"; then
              echo "  🗑️ Deleting security group: $sg"
              aws ec2 delete-security-group --group-id "$sg" 2>/devnull || true
            fi
          done
          
          # 7. Lambda Layers
          echo "🔍 Checking for orphaned Lambda layers..."
          for layer in $(aws lambda list-layers --query 'Layers[].LayerName' --output text | tr '\t' '\n' | grep "$STACK" 2>/dev/null || true); do
            echo "  🗑️ Deleting Lambda layer: $layer"
            for version in $(aws lambda list-layer-versions --layer-name "$layer" --query 'LayerVersions[].Version' --output text || true); do
              aws lambda delete-layer-version --layer-name "$layer" --version-number "$version" 2>/dev/null || true
            done
          done
          
          # 8. CloudWatch Log Groups
          echo "🔍 Checking for orphaned log groups..."
          for log_group in $(aws logs describe-log-groups \
            --log-group-name-prefix "/aws/lambda/${STACK}" \
            --query 'logGroups[].logGroupName' --output text 2>/dev/null || true); do
            echo "  🗑️ Deleting log group: $log_group"
            aws logs delete-log-group --log-group-name "$log_group" 2>/dev/null || true
          done
          
          echo "\n✅ Cleanup completed - ready for fresh deployment"

      - name: Install tooling
        run: pip install aws-sam-cli boto3 jq

      - name: 🚀 Build & Deploy SAM with Existing VPC
        id: deploy_step
        run: |
          set -euo pipefail
          cd aws
          sam build --template template.yaml
          ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
          BUCKET="sam-deployment-${ACCOUNT_ID}-${{ env.AWS_DEFAULT_REGION }}"
          aws s3api head-bucket --bucket "$BUCKET" 2>/dev/null || aws s3api create-bucket --bucket "$BUCKET"
          JWT_SECRET=$(openssl rand -base64 48)
          VPC_ID="${{ needs.discover-infrastructure.outputs.vpc-id }}"
          PRIVATE_1="${{ needs.discover-infrastructure.outputs.private-subnet-1 }}"
          PRIVATE_2="${{ needs.discover-infrastructure.outputs.private-subnet-2 }}"
          PUBLIC_1="${{ needs.discover-infrastructure.outputs.public-subnet-1 }}"
          echo "🔧 Using discovered infrastructure:"
          echo "  VPC: $VPC_ID"
          echo "  Private: $PRIVATE_1, $PRIVATE_2"
          echo "  Public: ${PUBLIC_1:-<none>}"
          PARAMS=(
            "Stage=prod"
            "JwtSecret=$JWT_SECRET"
            "CorsOrigins=https://yourdomain.com"
            "VpcId=$VPC_ID"
            "PrivateSubnetId1=$PRIVATE_1"
            "PrivateSubnetId2=$PRIVATE_2"
          )
          [[ -n "$PUBLIC_1" ]] && PARAMS+=("PublicSubnetId1=$PUBLIC_1")
          echo "📦 Parameter count: ${#PARAMS[@]}"
          sam deploy \
            --stack-name "${{ env.STACK_NAME }}" \
            --region ${{ env.AWS_DEFAULT_REGION }} \
            --s3-bucket "$BUCKET" \
            --parameter-overrides "${PARAMS[@]}" \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset \
            --no-confirm-changeset

      - name: 📤 Export outputs
        id: out
        run: |
          set -euo pipefail
          API_ENDPOINT=$(aws cloudformation describe-stacks --stack-name "${{ env.STACK_NAME }}" --query 'Stacks[0].Outputs[?OutputKey==`ApiEndpoint`].OutputValue' --output text)
          SCHEMA_FUNCTION_NAME=$(aws cloudformation describe-stacks --stack-name "${{ env.STACK_NAME }}" --query 'Stacks[0].Outputs[?OutputKey==`SchemaInitializerFunctionName`].OutputValue' --output text)
          echo "api_endpoint=$API_ENDPOINT" >> $GITHUB_OUTPUT
          echo "schema_function_name=$SCHEMA_FUNCTION_NAME" >> $GITHUB_OUTPUT

{
  "Comment": "Subscriber Migration Workflow - Handles bulk migration jobs with automatic retries and rollbacks",
  "StartAt": "ValidateJob",
  "TimeoutSeconds": 3600,
  "States": {
    "ValidateJob": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${ValidateJobLambdaArn}",
        "Payload": {
          "jobId.$": "$.jobId",
          "inputFileKey.$": "$.inputFileKey",
          "jobType.$": "$.jobType",
          "filters.$": "$.filters"
        }
      },
      "ResultPath": "$.validation",
      "Next": "CheckValidation",
      "Retry": [
        {
          "ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException"],
          "IntervalSeconds": 2,
          "MaxAttempts": 3,
          "BackoffRate": 2.0
        }
      ],
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "JobFailed",
          "ResultPath": "$.error"
        }
      ]
    },
    
    "CheckValidation": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.validation.Payload.valid",
          "BooleanEquals": true,
          "Next": "UpdateJobStatus"
        }
      ],
      "Default": "ValidationFailed"
    },
    
    "ValidationFailed": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName": "${MigrationJobsTable}",
        "Key": {
          "job_id": {
            "S.$": "$.jobId"
          }
        },
        "UpdateExpression": "SET job_status = :status, error_message = :error, updated_at = :timestamp",
        "ExpressionAttributeValues": {
          ":status": {"S": "FAILED"},
          ":error": {"S.$": "$.validation.Payload.error"},
          ":timestamp": {"S.$": "$$.State.EnteredTime"}
        }
      },
      "End": true
    },
    
    "UpdateJobStatus": {
      "Type": "Task", 
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName": "${MigrationJobsTable}",
        "Key": {
          "job_id": {
            "S.$": "$.jobId"
          }
        },
        "UpdateExpression": "SET job_status = :status, started_at = :timestamp",
        "ExpressionAttributeValues": {
          ":status": {"S": "RUNNING"},
          ":timestamp": {"S.$": "$$.State.EnteredTime"}
        }
      },
      "ResultPath": null,
      "Next": "DetermineJobType"
    },
    
    "DetermineJobType": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.jobType",
          "StringEquals": "MIGRATION",
          "Next": "ProcessMigration"
        },
        {
          "Variable": "$.jobType", 
          "StringEquals": "BULK_DELETE",
          "Next": "ProcessBulkDelete"
        },
        {
          "Variable": "$.jobType",
          "StringEquals": "AUDIT", 
          "Next": "ProcessAudit"
        },
        {
          "Variable": "$.jobType",
          "StringEquals": "EXPORT",
          "Next": "ProcessExport"
        }
      ],
      "Default": "UnsupportedJobType"
    },
    
    "ProcessMigration": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${ProcessMigrationLambdaArn}",
        "Payload": {
          "jobId.$": "$.jobId",
          "inputFileKey.$": "$.inputFileKey", 
          "filters.$": "$.filters",
          "batchSize": 100
        }
      },
      "ResultPath": "$.result",
      "Next": "ProcessingComplete",
      "Retry": [
        {
          "ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException"],
          "IntervalSeconds": 5,
          "MaxAttempts": 3,
          "BackoffRate": 2.0
        },
        {
          "ErrorEquals": ["States.TaskFailed"],
          "IntervalSeconds": 10,
          "MaxAttempts": 2,
          "BackoffRate": 3.0
        }
      ],
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "ProcessingFailed",
          "ResultPath": "$.error"
        }
      ]
    },
    
    "ProcessBulkDelete": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${ProcessBulkDeleteLambdaArn}",
        "Payload": {
          "jobId.$": "$.jobId",
          "inputFileKey.$": "$.inputFileKey",
          "filters.$": "$.filters",
          "batchSize": 50
        }
      },
      "ResultPath": "$.result",
      "Next": "ProcessingComplete",
      "Retry": [
        {
          "ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException"],
          "IntervalSeconds": 5,
          "MaxAttempts": 3,
          "BackoffRate": 2.0
        }
      ],
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "ProcessingFailed",
          "ResultPath": "$.error"
        }
      ]
    },
    
    "ProcessAudit": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke", 
      "Parameters": {
        "FunctionName": "${ProcessAuditLambdaArn}",
        "Payload": {
          "jobId.$": "$.jobId",
          "filters.$": "$.filters",
          "auditType.$": "$.auditType"
        }
      },
      "ResultPath": "$.result",
      "Next": "ProcessingComplete",
      "Retry": [
        {
          "ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException"],
          "IntervalSeconds": 3,
          "MaxAttempts": 2,
          "BackoffRate": 2.0
        }
      ],
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "ProcessingFailed",
          "ResultPath": "$.error"
        }
      ]
    },
    
    "ProcessExport": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "ExportCloud",
          "States": {
            "ExportCloud": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${ProcessExportLambdaArn}",
                "Payload": {
                  "jobId.$": "$.jobId",
                  "source": "cloud",
                  "filters.$": "$.filters"
                }
              },
              "End": true
            }
          }
        },
        {
          "StartAt": "ExportLegacy",
          "States": {
            "ExportLegacy": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${ProcessExportLambdaArn}",
                "Payload": {
                  "jobId.$": "$.jobId",
                  "source": "legacy",
                  "filters.$": "$.filters"
                }
              },
              "End": true
            }
          }
        }
      ],
      "ResultPath": "$.result",
      "Next": "MergeExportResults",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "ProcessingFailed",
          "ResultPath": "$.error"
        }
      ]
    },
    
    "MergeExportResults": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${MergeExportLambdaArn}",
        "Payload": {
          "jobId.$": "$.jobId",
          "cloudResult.$": "$.result[0]",
          "legacyResult.$": "$.result[1]"
        }
      },
      "ResultPath": "$.result",
      "Next": "ProcessingComplete"
    },
    
    "ProcessingComplete": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName": "${MigrationJobsTable}",
        "Key": {
          "job_id": {
            "S.$": "$.jobId"
          }
        },
        "UpdateExpression": "SET job_status = :status, finished_at = :timestamp, processed_records = :processed, success_records = :success, failed_records = :failed, output_file_key = :output",
        "ExpressionAttributeValues": {
          ":status": {"S": "COMPLETED"},
          ":timestamp": {"S.$": "$$.State.EnteredTime"},
          ":processed": {"N.$": "States.JsonToString($.result.Payload.processedRecords)"},
          ":success": {"N.$": "States.JsonToString($.result.Payload.successRecords)"},
          ":failed": {"N.$": "States.JsonToString($.result.Payload.failedRecords)"},
          ":output": {"S.$": "$.result.Payload.outputFileKey"}
        }
      },
      "End": true
    },
    
    "ProcessingFailed": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem", 
      "Parameters": {
        "TableName": "${MigrationJobsTable}",
        "Key": {
          "job_id": {
            "S.$": "$.jobId"
          }
        },
        "UpdateExpression": "SET job_status = :status, finished_at = :timestamp, error_message = :error",
        "ExpressionAttributeValues": {
          ":status": {"S": "FAILED"},
          ":timestamp": {"S.$": "$$.State.EnteredTime"},
          ":error": {"S.$": "$.error.Cause"}
        }
      },
      "End": true
    },
    
    "JobFailed": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName": "${MigrationJobsTable}",
        "Key": {
          "job_id": {
            "S.$": "$.jobId"
          }
        },
        "UpdateExpression": "SET job_status = :status, finished_at = :timestamp, error_message = :error",
        "ExpressionAttributeValues": {
          ":status": {"S": "FAILED"},
          ":timestamp": {"S.$": "$$.State.EnteredTime"},
          ":error": {"S.$": "$.error.Cause"}
        }
      },
      "End": true
    },
    
    "UnsupportedJobType": {
      "Type": "Fail",
      "Cause": "Unsupported job type",
      "Error": "UnsupportedJobType"
    }
  }
}
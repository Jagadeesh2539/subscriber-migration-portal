name: 🚀 Deploy Consolidated Portal

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: false
        default: 'prod'
        type: choice
        options: ['dev','staging','prod']
      deploy_type:
        description: 'Deployment type'
        required: false
        default: 'full'
        type: choice
        options: ['full','frontend-only','backend-only']
      use_npm_ci:
        description: 'Use npm ci for reproducible builds (recommended)'
        required: false
        default: 'true'
        type: choice
        options: ['true','false']

env:
  AWS_DEFAULT_REGION: us-east-1
  STACK_NAME: subscriber-migration-portal-${{ github.ref_name }}

jobs:
  infra:
    name: 🏗️ Infra (CloudFormation)
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔐 Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: ✅ Validate template
        run: |
          aws cloudformation validate-template \
            --template-body file://aws/cloudformation.yaml

      - name: 🚀 Deploy stack (IaC)
        run: |
          set -e
          aws cloudformation deploy \
            --stack-name "${{ env.STACK_NAME }}" \
            --template-file aws/cloudformation.yaml \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              Environment=${{ inputs.environment || 'prod' }} \
              LegacyDbUsername=${{ secrets.LEGACY_DB_USERNAME }} \
              LegacyDbPassword=${{ secrets.LEGACY_DB_PASSWORD }} \
            --no-fail-on-empty-changeset

      - name: 📤 Stack outputs
        id: outputs
        run: |
          aws cloudformation describe-stacks --stack-name "${{ env.STACK_NAME }}" \
            --query 'Stacks[0].Outputs' --output json > /tmp/outputs.json
          cat /tmp/outputs.json

      - name: 🔗 Configure S3 → Lambda notifications
        run: |
          set -e
          BUCKET=$(aws cloudformation describe-stacks --stack-name "${{ env.STACK_NAME }}" \
            --query "Stacks[0].Outputs[?OutputKey=='MigrationUploadBucketName'].OutputValue" --output text)
          LAMBDA_ARN=$(aws cloudformation describe-stacks --stack-name "${{ env.STACK_NAME }}" \
            --query "Stacks[0].Outputs[?OutputKey=='MigrationProcessorArn'].OutputValue" --output text)

          if [ -z "$BUCKET" ] || [ -z "$LAMBDA_ARN" ]; then
            echo "Failed to resolve bucket or lambda ARN from stack outputs" >&2
            exit 1
          fi

          aws s3api put-bucket-notification-configuration \
            --bucket "$BUCKET" \
            --notification-configuration "{\
              \"LambdaFunctionConfigurations\": [\
                {\
                  \"LambdaFunctionArn\": \"$LAMBDA_ARN\",\
                  \"Events\": [\"s3:ObjectCreated:*\"],\
                  \"Filter\": {\
                    \"Key\": { \"FilterRules\": [\
                      { \"Name\": \"prefix\", \"Value\": \"uploads/\" },\
                      { \"Name\": \"suffix\", \"Value\": \".csv\" }\
                    ]}\
                  }\
                }\
              ]\
            }"

  deploy:
    name: 🎯 App Deploy
    needs: [infra]
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 🔐 Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: 🎨 Build and deploy frontend
        if: github.event.inputs.deploy_type != 'backend-only'
        run: |
          cd frontend
          echo "📦 Installing frontend dependencies..."
          if [ "${{ github.event.inputs.use_npm_ci }}" = "true" ]; then
            if [ ! -f package-lock.json ]; then
              echo "❌ package-lock.json not found. npm ci requires a lockfile. Set use_npm_ci=false to fallback." >&2
              exit 1
            fi
            echo "🔒 Using npm ci for reproducible build..."
            npm ci --legacy-peer-deps
            echo "🔎 Dependency tree (top-level):" && npm ls --depth=0 || true
          else
            echo "📦 Using npm install fallback..."
            npm cache clean --force 2>/dev/null || true
            rm -f package-lock.json npm-shrinkwrap.json yarn.lock pnpm-lock.yaml
            rm -rf node_modules 2>/dev/null || true
            npm install --no-package-lock --no-audit --no-fund --legacy-peer-deps --force
            echo "🔎 Dependency tree (top-level):" && npm ls --depth=0 || true
          fi
          
          echo "🔧 Configure env"
          cat > .env.production << EOF
          REACT_APP_API_BASE_URL=https://${{ secrets.API_GATEWAY_ID }}.execute-api.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com/prod
          REACT_APP_VERSION=2.0.0-production
          REACT_APP_LEGACY_ENABLED=true
          REACT_APP_CLOUD_ENABLED=true
          REACT_APP_DUAL_PROV_ENABLED=true
          REACT_APP_PROVISIONING_MODES=legacy,cloud,dual_prov
          EOF
          
          echo "🔨 Build"
          NODE_OPTIONS="--max-old-space-size=8192" npm run build
          
          echo "☁️ Deploy to S3"
          aws s3 sync build/ s3://${{ secrets.FRONTEND_BUCKET }}/ --delete --cache-control "public, max-age=0, must-revalidate"

      - name: 🔧 Build and deploy backend
        if: github.event.inputs.deploy_type != 'frontend-only'
        run: |
          cd backend
          pip install --no-cache-dir --target . -r requirements.txt
          cp app.py lambda_function.py
          zip -q -r ../backend-deploy.zip . -x "*.pyc" "__pycache__/*" "*.git*" "app_*.py" "*.md" "Dockerfile" "setup_legacy_schema.py" "*.log" "migration_processor/*" "*backup*" "monitoring.py" "reporting.py"
          cd ..
          echo "🚀 Update Lambda"
          aws lambda update-function-code --function-name ${{ secrets.BACKEND_LAMBDA }} --zip-file fileb://backend-deploy.zip
          aws lambda wait function-updated --function-name ${{ secrets.BACKEND_LAMBDA }}

      - name: 🔄 Update API Gateway
        if: github.event.inputs.deploy_type != 'frontend-only'
        run: |
          DEPLOYMENT_ID=$(aws apigateway create-deployment --rest-api-id ${{ secrets.API_GATEWAY_ID }} --description "Portal $(date +%Y%m%d-%H%M%S)" --query 'id' --output text)
          aws apigateway update-stage --rest-api-id ${{ secrets.API_GATEWAY_ID }} --stage-name prod --patch-operations op=replace,path=/deploymentId,value=$DEPLOYMENT_ID

      - name: 🧪 Post-deploy health checks
        run: |
          API_URL="https://${{ secrets.API_GATEWAY_ID }}.execute-api.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com/prod"
          FRONTEND_URL="http://${{ secrets.FRONTEND_BUCKET }}.s3-website-${{ env.AWS_DEFAULT_REGION }}.amazonaws.com"
          echo "⏳ Wait 45s"
          sleep 45
          echo "1) API Health" && curl -s -w " % {http_code}\n" "$API_URL/api/health" -o /dev/null || true
          echo "2) Frontend" && curl -s -o /dev/null -w "%{http_code}\n" "$FRONTEND_URL" || true

AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Subscriber Migration Portal - Step Functions with decoupled IAM to avoid cycles'

Parameters:
  Stage:
    Type: String
    Default: 'prod'
  CorsOrigins:
    Type: String
    Default: 'https://yourdomain.com'
  JwtSecret:
    Type: String
    NoEcho: true

Globals:
  Function:
    Timeout: 30
    MemorySize: 512
    Runtime: python3.11
    Environment:
      Variables:
        STAGE: !Ref Stage
        CORS_ORIGINS: !Ref CorsOrigins
        AWS_STACK_NAME: !Sub '${AWS::StackName}'
  Api:
    Cors:
      AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: !Sub "'${CorsOrigins}'"
      MaxAge: "'600'"

Resources:
  # ======================
  # STORAGE RESOURCES
  # ======================
  UploadsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-uploads'
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  SubscribersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-subscribers'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: uid
          AttributeType: S
      KeySchema:
        - AttributeName: uid
          KeyType: HASH

  SettingsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-settings'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: sk
          AttributeType: S
      KeySchema:
        - AttributeName: sk
          KeyType: HASH

  MigrationJobsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-migration-jobs'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: job_id
          AttributeType: S
      KeySchema:
        - AttributeName: job_id
          KeyType: HASH

  # ======================
  # IAM ROLES (no inline policies to avoid cycles)
  # ======================
  StepFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole

  LambdaBasicRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole

  # ======================
  # LAMBDA FUNCTIONS
  # ======================
  OrchestratorFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt LambdaBasicRole.Arn
      CodeUri: lambda/migration/
      Handler: orchestrator.lambda_handler
      Timeout: 60
      Environment:
        Variables:
          MIGRATION_JOBS_TABLE: !Ref MigrationJobsTable
          UPLOADS_BUCKET: !Ref UploadsBucket
      Events:
        UploadRequest:
          Type: Api
          Properties:
            Path: /migration/upload
            Method: POST
        CreateMigrationJob:
          Type: Api
          Properties:
            Path: /migration/jobs
            Method: POST
        CreateAuditJob:
          Type: Api
          Properties:
            Path: /audit/jobs
            Method: POST
        CreateExportJob:
          Type: Api
          Properties:
            Path: /export/jobs
            Method: POST
        GetJobStatus:
          Type: Api
          Properties:
            Path: "/jobs/{id}"
            Method: GET
        CancelJob:
          Type: Api
          Properties:
            Path: "/jobs/{id}/cancel"
            Method: POST
        ListJobs:
          Type: Api
          Properties:
            Path: /jobs
            Method: GET

  ValidateJobFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt LambdaBasicRole.Arn
      CodeUri: lambda/migration/
      Handler: validate_job.lambda_handler
      Environment:
        Variables:
          UPLOADS_BUCKET: !Ref UploadsBucket

  ProcessFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt LambdaBasicRole.Arn
      CodeUri: lambda/migration/
      Handler: process_file.lambda_handler
      Timeout: 900
      MemorySize: 1024
      Environment:
        Variables:
          SUBSCRIBERS_TABLE: !Ref SubscribersTable
          MIGRATION_JOBS_TABLE: !Ref MigrationJobsTable
          UPLOADS_BUCKET: !Ref UploadsBucket

  ProcessAuditFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt LambdaBasicRole.Arn
      CodeUri: lambda/migration/
      Handler: process_audit.lambda_handler
      Timeout: 600
      Environment:
        Variables:
          SUBSCRIBERS_TABLE: !Ref SubscribersTable
          MIGRATION_JOBS_TABLE: !Ref MigrationJobsTable
          UPLOADS_BUCKET: !Ref UploadsBucket

  ProcessExportFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt LambdaBasicRole.Arn
      CodeUri: lambda/migration/
      Handler: process_export.lambda_handler
      Timeout: 600
      Environment:
        Variables:
          SUBSCRIBERS_TABLE: !Ref SubscribersTable
          MIGRATION_JOBS_TABLE: !Ref MigrationJobsTable
          UPLOADS_BUCKET: !Ref UploadsBucket

  SettingsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt LambdaBasicRole.Arn
      CodeUri: lambda/settings/
      Handler: handler.lambda_handler
      Environment:
        Variables:
          SETTINGS_TABLE: !Ref SettingsTable
      Events:
        GetMode:
          Type: Api
          Properties:
            Path: /settings/provisioning-mode
            Method: GET
        PutMode:
          Type: Api
          Properties:
            Path: /settings/provisioning-mode
            Method: PUT

  HealthFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt LambdaBasicRole.Arn
      CodeUri: lambda/health/
      Handler: handler.lambda_handler
      Environment:
        Variables:
          SUBSCRIBERS_TABLE: !Ref SubscribersTable
          SETTINGS_TABLE: !Ref SettingsTable
          MIGRATION_JOBS_TABLE: !Ref MigrationJobsTable
      Events:
        HealthCheck:
          Type: Api
          Properties:
            Path: /health
            Method: GET

  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt LambdaBasicRole.Arn
      CodeUri: lambda/auth/
      Handler: handler.lambda_handler
      Environment:
        Variables:
          JWT_SECRET: !Ref JwtSecret
      Events:
        Login:
          Type: Api
          Properties:
            Path: /auth/login
            Method: POST
        VerifyToken:
          Type: Api
          Properties:
            Path: /auth/verify
            Method: POST
        RefreshToken:
          Type: Api
          Properties:
            Path: /auth/refresh
            Method: POST

  # ======================
  # STEP FUNCTIONS
  # ======================
  MigrationWorkflow:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub '${AWS::StackName}-migration-workflow'
      RoleArn: !GetAtt StepFunctionExecutionRole.Arn
      DefinitionString: !Sub |
        {
          "Comment": "Migration Workflow with validation and processing",
          "StartAt": "ValidateJob",
          "TimeoutSeconds": 3600,
          "States": {
            "ValidateJob": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${ValidateJobFunction.Arn}",
                "Payload.$": "$"
              },
              "ResultPath": "$.validation",
              "Next": "ProcessMigration",
              "Retry": [
                {
                  "ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException"],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 3
                }
              ]
            },
            "ProcessMigration": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${ProcessFileFunction.Arn}",
                "Payload.$": "$"
              },
              "End": true
            }
          }
        }

  AuditWorkflow:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub '${AWS::StackName}-audit-workflow'
      RoleArn: !GetAtt StepFunctionExecutionRole.Arn
      DefinitionString: !Sub |
        {
          "Comment": "Audit Workflow for consistency checks",
          "StartAt": "ProcessAudit",
          "TimeoutSeconds": 1800,
          "States": {
            "ProcessAudit": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${ProcessAuditFunction.Arn}",
                "Payload.$": "$"
              },
              "End": true
            }
          }
        }

  ExportWorkflow:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub '${AWS::StackName}-export-workflow'
      RoleArn: !GetAtt StepFunctionExecutionRole.Arn
      DefinitionString: !Sub |
        {
          "Comment": "Export Workflow for data extraction",
          "StartAt": "ProcessExport", 
          "TimeoutSeconds": 2400,
          "States": {
            "ProcessExport": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${ProcessExportFunction.Arn}",
                "Payload.$": "$"
              },
              "End": true
            }
          }
        }

  # ======================
  # IAM POLICIES (attached after all resources exist)
  # ======================
  StepFunctionInvokeLambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: StepFunctionInvokeLambdaPolicy
      Roles: 
        - !Ref StepFunctionExecutionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 
              - 'lambda:InvokeFunction'
            Resource:
              - !GetAtt ValidateJobFunction.Arn
              - !GetAtt ProcessFileFunction.Arn
              - !GetAtt ProcessAuditFunction.Arn
              - !GetAtt ProcessExportFunction.Arn

  StepFunctionDynamoPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: StepFunctionDynamoPolicy
      Roles:
        - !Ref StepFunctionExecutionRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'dynamodb:GetItem'
              - 'dynamodb:PutItem'
              - 'dynamodb:UpdateItem'
            Resource: !GetAtt MigrationJobsTable.Arn

  LambdaBasicExecutionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LambdaBasicExecutionPolicy
      Roles:
        - !Ref LambdaBasicRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: '*'
          - Effect: Allow
            Action:
              - 'dynamodb:*'
            Resource:
              - !GetAtt SubscribersTable.Arn
              - !GetAtt MigrationJobsTable.Arn
              - !GetAtt SettingsTable.Arn
          - Effect: Allow
            Action:
              - 's3:*'
            Resource:
              - !Sub '${UploadsBucket}*'
              - !Sub '${UploadsBucket}/*'
          - Effect: Allow
            Action:
              - 'states:StartExecution'
              - 'states:DescribeExecution'
              - 'states:StopExecution'
              - 'cloudformation:DescribeStacks'
            Resource: '*'

  # S3 Notification Permission
  ProcessFileFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ProcessFileFunction.Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !GetAtt UploadsBucket.Arn

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}'
    
  UploadsBucketName:
    Description: S3 bucket for file uploads
    Value: !Ref UploadsBucket
    
  MigrationJobsTableName:
    Description: DynamoDB table for job tracking
    Value: !Ref MigrationJobsTable
    
  SubscribersTableName:
    Description: DynamoDB Subscribers table name
    Value: !Ref SubscribersTable
    
  SettingsTableName:
    Description: DynamoDB Settings table name
    Value: !Ref SettingsTable
    
  MigrationWorkflowArn:
    Description: Migration Step Function ARN
    Value: !Ref MigrationWorkflow
    
  AuditWorkflowArn:
    Description: Audit Step Function ARN
    Value: !Ref AuditWorkflow
    
  ExportWorkflowArn:
    Description: Export Step Function ARN
    Value: !Ref ExportWorkflow
AWSTemplateFormatVersion: "2010-09-09"
Description: Full Subscriber Migration Portal Infrastructure

Parameters:
  DomainName:
    Type: String
    Description: Optional domain name for the frontend site

Resources:

  # ---------------------------------------------------------------------
  # S3 Bucket for frontend static website
  # ---------------------------------------------------------------------
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "subscriber-portal-${AWS::AccountId}-${AWS::Region}"
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "${FrontendBucket.Arn}/*"

  # ---------------------------------------------------------------------
  # DynamoDB tables
  # ---------------------------------------------------------------------
  
  # --- THIS IS THE CORRECTED RESOURCE ---
  # 1. Added 'imsi' and 'msisdn' to AttributeDefinitions
  # 2. Added the entire 'GlobalSecondaryIndexes' block
  SubscriberTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "SubscriberTable-${AWS::AccountId}-${AWS::Region}"
      AttributeDefinitions:
        - AttributeName: subscriberId
          AttributeType: S
        - AttributeName: imsi
          AttributeType: S
        - AttributeName: msisdn
          AttributeType: S
      KeySchema:
        - AttributeName: subscriberId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: IMSI-Index
          KeySchema:
            - AttributeName: imsi
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: MSISDN-Index
          KeySchema:
            - AttributeName: msisdn
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  AuditLogTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "AuditLogTable-${AWS::AccountId}-${AWS::Region}"
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  # ---------------------------------------------------------------------
  # IAM Role for Lambda
  # ---------------------------------------------------------------------
  BackendLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "SubscriberBackendRole-${AWS::AccountId}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  # ---------------------------------------------------------------------
  # Lambda function
  # ---------------------------------------------------------------------
  BackendLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "subscriber-backend-${AWS::AccountId}-${AWS::Region}"
      Handler: app.lambda_handler
      Runtime: python3.11
      Role: !GetAtt BackendLambdaRole.Arn
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {"statusCode": 200, "body": "Lambda created"}

  # ---------------------------------------------------------------------
  # NEW: API Gateway REST API
  # ---------------------------------------------------------------------
  BackendApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "migration-portal-api-${AWS::Region}"
      Description: "API for the Subscriber Migration Portal"
      EndpointConfiguration:
        Types:
          - REGIONAL

  # NEW: The /{proxy+} "catch-all" resource
  ApiProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt BackendApi.RootResourceId
      RestApiId: !Ref BackendApi
      PathPart: "{proxy+}"

  # NEW: The ANY method on the /{proxy+} resource
  ApiProxyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST # This must be POST for Lambda proxy
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BackendLambda.Arn}/invocations"
      ResourceId: !Ref ApiProxyResource
      RestApiId: !Ref BackendApi

  # NEW: The ANY method on the root (/) resource
  ApiRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BackendLambda.Arn}/invocations"
      ResourceId: !GetAtt BackendApi.RootResourceId
      RestApiId: !Ref BackendApi

  # NEW: Permission for API Gateway to invoke the Lambda
  LambdaApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref BackendLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BackendApi}/*/*"

  # NEW: The API Gateway Deployment (required to create a stage)
  # We make it dependent on the routes so it deploys *after* they are made.
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiProxyMethod
      - ApiRootMethod
    Properties:
      RestApiId: !Ref BackendApi

  # NEW: The "prod" stage for the API
  ApiProdStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: prod
      Description: Production Stage
      RestApiId: !Ref BackendApi
      DeploymentId: !Ref ApiDeployment

# ---------------------------------------------------------------------
# Outputs
# ---------------------------------------------------------------------
Outputs:
  FrontendURL:
    Description: URL of the frontend
    Value: !Sub "http://${FrontendBucket}.s3-website.${AWS::Region}.amazonaws.com"

  SubscriberTableName:
    Description: DynamoDB subscriber table
    Value: !Ref SubscriberTable

  AuditLogTableName:
    Description: DynamoDB audit log table
    Value: !Ref AuditLogTable

  BackendLambdaName:
    Description: Name of the backend Lambda
    Value: !Ref BackendLambda

  # NEW: Output the ID of the API we just created
  BackendApiId:
    Description: The ID of the new API Gateway
    Value: !Ref BackendApi

  # NEW: Output the Invoke URL for the new API
  BackendApiUrl:
    Description: The public URL for the API Gateway prod stage
    Value: !Sub "https://{BackendApi}.execute-api.${AWS::Region}.amazonaws.com/prod"

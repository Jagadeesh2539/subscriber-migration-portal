AWSTemplateFormatVersion: '2010-09-09'
Description: Subscriber Migration Portal Infrastructure Stack (Full corrected version)

Parameters:
  DomainName:
    Type: String
    Description: "Domain name for the portal"

  LegacyDBPassword:
    Type: String
    NoEcho: true
    Description: "Password for legacy database"

  DevelopmentMode:
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
    Description: "Development mode flag"

  ExistingVPCId:
    Type: String
    Default: ""
    Description: "Reuse existing VPC; leave blank to create new"

Conditions:
  CreateNewVPC: !Equals [ !Ref ExistingVPCId, "" ]

Resources:
  #################################
  # Networking - VPC and Subnets  #
  #################################

  VPC:
    Type: AWS::EC2::VPC
    Condition: CreateNewVPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: subscriber-migration-vpc

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Condition: CreateNewVPC
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: public-subnet-1

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Condition: CreateNewVPC
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: private-subnet-1
  
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Condition: CreateNewVPC
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24 # Use a different CIDR block, e.g., 10.0.3.0/24
      AvailabilityZone: !Select [1, !GetAZs ''] # Use the SECOND Availability Zone
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: private-subnet-2

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Condition: CreateNewVPC
    Properties:
      Tags:
        - Key: Name
          Value: IGW

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: CreateNewVPC
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: CreateNewVPC
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    Condition: CreateNewVPC
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateNewVPC
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  NatEIP:
    Type: AWS::EC2::EIP
    Condition: CreateNewVPC
    DependsOn: VPCGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Condition: CreateNewVPC
    DependsOn: VPCGatewayAttachment
    Properties:
      AllocationId: !GetAtt NatEIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: CreateNewVPC
    Properties:
      VpcId: !Ref VPC

  PrivateSubnet2RouteTableAssociation: # Renamed from PrivateSubnetRouteTableAssociation
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateNewVPC
    Properties:
      SubnetId: !Ref PrivateSubnet2 # Associate with PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # --- Existing PrivateSubnet1 association (adjust logical ID if needed) ---
  PrivateSubnet1RouteTableAssociation: # Make sure the logical ID is unique
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateNewVPC
    Properties:
      SubnetId: !Ref PrivateSubnet1 # Associate with PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateRouteToNat:
    Type: AWS::EC2::Route
    Condition: CreateNewVPC
    DependsOn: NatGateway
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway


  ####################################
  # Security Groups                  #
  ####################################

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Lambda Functions Security Group
      VpcId: !If [CreateNewVPC, !Ref VPC, !Ref ExistingVPCId]

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: RDS Security Group
      VpcId: !If [CreateNewVPC, !Ref VPC, !Ref ExistingVPCId]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref LambdaSecurityGroup

  ####################################
  # RDS Database and Secrets         #
  ####################################

  LegacyDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Condition: CreateNewVPC
    Properties:
      DBSubnetGroupDescription: "Subnet group for Legacy DB"
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2   # add a second private subnet from another AZ, e.g., us-east-1b

  LegacyDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: "subscriber-migration-legacydb"
      Engine: mysql
      EngineVersion: "5.7"
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 20
      MasterUsername: admin
      MasterUserPassword: !Ref LegacyDBPassword
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !If [CreateNewVPC, !Ref LegacyDBSubnetGroup, !Ref AWS::NoValue]
      PubliclyAccessible: false
      MultiAZ: false

  LegacyDBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: subscriber-legacy-db-secret
      Description: Legacy DB credentials
      SecretString: !Sub |
        {
          "username": "admin",
          "password": "${LegacyDBPassword}"
        }

  ####################################
  # DynamoDB Tables                  #
  ####################################

  SubscriberTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: subscriber-table
      AttributeDefinitions:
        - AttributeName: SubscriberId
          AttributeType: S
        - AttributeName: IMSI
          AttributeType: S
        - AttributeName: MSISDN
          AttributeType: S
      KeySchema:
        - AttributeName: SubscriberId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: ImsiIndex
          KeySchema:
            - AttributeName: IMSI
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: MsisdnIndex
          KeySchema:
            - AttributeName: MSISDN
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  AuditLogTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: audit-log-table
      AttributeDefinitions:
        - AttributeName: LogId
          AttributeType: S
      KeySchema:
        - AttributeName: LogId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  MigrationJobsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: migration-jobs-table
      AttributeDefinitions:
        - AttributeName: JobId
          AttributeType: S
      KeySchema:
        - AttributeName: JobId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  ####################################
  # S3 Buckets                      #
  ####################################

  MigrationUploadBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-migration-uploads"

  # Correct indentation for FrontendBucket
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${AWS::StackName}-frontend"
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: false
        IgnorePublicAcls: true
        RestrictPublicBuckets: false

  # Correct indentation for FrontendBucketPolicy
  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Join ['', [!GetAtt FrontendBucket.Arn, '/*']]

  ####################################
  # IAM Roles and Policies          #
  ####################################

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonRDSFullAccess
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite
        # --- Add this line ---
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Path: /

  ####################################
  # Lambda Functions                #
  ####################################

  BackendLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.11
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {
                  "statusCode": 200,
                  "body": "Backend Lambda placeholder"
              }
      Environment:
        Variables:
          DevelopmentMode: !Ref DevelopmentMode

  MigrationProcessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.8
      Handler: app.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {
                  "statusCode": 200,
                  "body": "Migration Processor placeholder"
              }
      Environment:
        Variables:
          DevelopmentMode: !Ref DevelopmentMode

  ####################################
  # API Gateway                    #
  ####################################

  BackendApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: SubscriberMigrationAPI
      EndpointConfiguration:
        Types:
          - REGIONAL

  ProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt BackendApi.RootResourceId
      PathPart: "{proxy+}"
      RestApiId: !Ref BackendApi

  ProxyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: ANY
      ResourceId: !Ref ProxyResource
      RestApiId: !Ref BackendApi
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BackendLambda.Arn}/invocations
        PassthroughBehavior: WHEN_NO_MATCH

  RootProxyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: ANY
      ResourceId: !GetAtt BackendApi.RootResourceId
      RestApiId: !Ref BackendApi
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BackendLambda.Arn}/invocations
        PassthroughBehavior: WHEN_NO_MATCH

  BackendApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ProxyMethod
      - RootProxyMethod
    Properties:
      RestApiId: !Ref BackendApi
      StageName: prod

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref BackendLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BackendApi}/*/*/*

Outputs:
  BackendLambdaName:
    Description: Name of the backend Lambda function
    Value: !Ref BackendLambda

  MigrationProcessorFunctionName:
    Description: Name of the migration processor Lambda function
    Value: !Ref MigrationProcessorFunction

  BackendApiId:
    Description: API Gateway RestApi ID
    Value: !Ref BackendApi

  BackendApiUrl:
    Description: Base URL for the API Gateway prod stage
    Value: !Sub "https://${BackendApi}.execute-api.${AWS::Region}.amazonaws.com/prod"

  FrontendBucketName:
    Description: S3 bucket name for frontend hosting
    Value: !Ref FrontendBucket

  FrontendURL:
    Description: Frontend website URL
    Value: !GetAtt FrontendBucket.WebsiteURL

  SubscriberTableName:
    Description: DynamoDB Subscriber Table name
    Value: !Ref SubscriberTable

  AuditLogTableName:
    Description: DynamoDB Audit Log Table name
    Value: !Ref AuditLogTable

  MigrationJobsTableName:
    Description: DynamoDB Migration Jobs Table name
    Value: !Ref MigrationJobsTable

  MigrationUploadBucketName:
    Description: S3 bucket name for uploads
    Value: !Ref MigrationUploadBucket

  LegacyDBSecretArn:
    Description: ARN of Secrets Manager Legacy DB Secret
    Value: !Ref LegacyDBSecret

  LegacyDBEndpoint:
    Description: RDS legacy database endpoint
    Value: !GetAtt LegacyDBInstance.Endpoint.Address

AWSTemplateFormatVersion: '2010-09-09'
Description: 'Subscriber Migration Portal - Production Ready (All Dependencies Fixed v8 - API Gateway Logging Fixed)'

Parameters:
  Environment:
    Type: String
    Default: 'prod'
    AllowedValues: ['dev', 'staging', 'prod']
    Description: 'Deployment environment'

  LegacyDbUsername:
    Type: String
    Default: 'admin'
    NoEcho: true
    Description: 'Legacy database username'

  LegacyDbPassword:
    Type: String
    NoEcho: true
    MinLength: 8
    Description: 'Legacy database password'

  CurrentTime:
    Type: String
    Default: 'placeholder'
    Description: 'Unique value to force API Gateway deployment update (override in workflow)'

  LogRetentionDays:
    Type: Number
    Default: 14
    MinValue: 1
    MaxValue: 3653
    Description: 'CloudWatch Logs retention in days'

Resources:
  # VPC and Networking
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub 'subscriber-migration-vpc-${Environment}'

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.1.0/24'
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub 'public-subnet-1-${Environment}'

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.2.0/24'
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub 'public-subnet-2-${Environment}'

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.3.0/24'
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub 'private-subnet-1-${Environment}'

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: '10.0.4.0/24'
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub 'private-subnet-2-${Environment}'

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub 'IGW-${Environment}'

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 'public-rt-${Environment}'

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  NATGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub 'NAT-EIP-${Environment}'

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub 'NAT-Gateway-${Environment}'

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub 'private-rt-${Environment}'

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NATGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # Security Groups (Fixed Circular Dependencies)
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'Lambda Functions Security Group'
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'
        # Allow all outbound traffic on ephemeral ports (for database connections)
        - IpProtocol: tcp
          FromPort: 1024
          ToPort: 65535
          CidrIp: '10.0.0.0/16'
      Tags:
        - Key: Name
          Value: !Sub 'lambda-sg-${Environment}'

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: 'RDS Security Group'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref LambdaSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub 'rds-sg-${Environment}'

  # DynamoDB Tables
  SubscriberTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'subscriber-table-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: SubscriberId
          AttributeType: S
      KeySchema:
        - AttributeName: SubscriberId
          KeyType: HASH
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      Tags:
        - Key: Environment
          Value: !Ref Environment

  AuditLogTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'audit-log-table-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      Tags:
        - Key: Environment
          Value: !Ref Environment

  MigrationJobsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'migration-jobs-table-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: JobId
          AttributeType: S
      KeySchema:
        - AttributeName: JobId
          KeyType: HASH
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # S3 Buckets (FIXED NAMING - Shorter bucket names)
  LoggingBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub 'sub-mig-logs-${AWS::AccountId}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault: { SSEAlgorithm: AES256 }

  FrontendBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub 'sub-mig-web-${AWS::AccountId}-${Environment}'
      WebsiteConfiguration:
        IndexDocument: 'index.html'
        ErrorDocument: 'index.html'
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingBucket
        LogFilePrefix: 'frontend-access/'
      OwnershipControls:
        Rules: [{ ObjectOwnership: BucketOwnerEnforced }]
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: false
        IgnorePublicAcls: true
        RestrictPublicBuckets: false
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault: { SSEAlgorithm: AES256 }

  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub 'arn:aws:s3:::${FrontendBucket}/*'

  MigrationUploadBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub 'sub-mig-data-${AWS::AccountId}-${Environment}'
      VersioningConfiguration: { Status: Enabled }
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault: { SSEAlgorithm: AES256 }
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingBucket
        LogFilePrefix: 'migration-upload-access/'

  # Secrets Manager (Independent - Created Early)
  LegacyDbSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${AWS::StackName}-legacy-db-secret'
      Description: !Sub 'Legacy DB credentials for ${Environment}'
      SecretString: !Sub |
        {
          "username": "${LegacyDbUsername}",
          "password": "${LegacyDbPassword}",
          "engine": "mysql",
          "database": "legacydb"
        }

  # RDS Database
  LegacyDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: 'Subnet group for Legacy DB'
      SubnetIds: [!Ref PrivateSubnet1, !Ref PrivateSubnet2]
      Tags:
        - Key: Name
          Value: !Sub 'legacy-db-subnet-group-${Environment}'

  LegacyDatabase:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Snapshot
    Properties:
      DBInstanceIdentifier: !Sub 'sub-mig-legacydb-${Environment}'
      DBInstanceClass: 'db.t3.micro'
      Engine: 'mysql'
      EngineVersion: '8.0.39'
      AllocatedStorage: 20
      StorageType: 'gp2'
      StorageEncrypted: true
      DBName: 'legacydb'
      MasterUsername: !Ref LegacyDbUsername
      MasterUserPassword: !Ref LegacyDbPassword
      DBSubnetGroupName: !Ref LegacyDBSubnetGroup
      VPCSecurityGroups: [!Ref RDSSecurityGroup]
      MultiAZ: false
      PubliclyAccessible: false
      Tags:
        - Key: Name
          Value: !Sub 'legacy-database-${Environment}'

  # API Gateway CloudWatch Logs Role
  ApiGatewayCloudWatchLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs

  # API Gateway Account Settings
  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayCloudWatchLogsRole.Arn

  # IAM Roles (Created Early to Avoid Dependencies)
  BackendLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'BackendLambdaRole-${Environment}-${AWS::Region}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: lambda.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:DescribeTable
                Resource:
                  - !GetAtt SubscriberTable.Arn
                  - !Sub '${SubscriberTable.Arn}/index/*'
                  - !GetAtt AuditLogTable.Arn
                  - !GetAtt MigrationJobsTable.Arn
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: secretsmanager:GetSecretValue
                Resource: !Ref LegacyDbSecret
        - PolicyName: S3AccessBackend
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                  - s3:GetBucketLocation
                Resource:
                  - !GetAtt MigrationUploadBucket.Arn
                  - !Sub '${MigrationUploadBucket.Arn}/*'

  MigrationProcessorRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'MigrationProcessorRole-${Environment}-${AWS::Region}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: lambda.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: MigrationDynamoS3Restricted
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:DescribeTable
                Resource:
                  - !GetAtt SubscriberTable.Arn
                  - !Sub '${SubscriberTable.Arn}/index/*'
                  - !GetAtt MigrationJobsTable.Arn
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub '${MigrationUploadBucket.Arn}/*'
              - Effect: Allow
                Action: secretsmanager:GetSecretValue
                Resource: !Ref LegacyDbSecret

  # Lambda Functions (Log groups auto-created)
  BackendLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-BackendLambda-${Environment}'
      Runtime: python3.11
      Handler: app.lambda_handler
      Timeout: 30  # ← ADD THIS (default is 3 seconds)
      MemorySize: 256  # ← ADD THIS for better performance
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              return {
                  'statusCode': 200,
                  'headers': {'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*'},
                  'body': json.dumps({'message': 'Backend Lambda operational - deploy code via workflow'})
              }
      Role: !GetAtt BackendLambdaRole.Arn
      Timeout: 30
      MemorySize: 512
      VpcConfig:
        SecurityGroupIds: [!Ref LambdaSecurityGroup]
        SubnetIds: [!Ref PrivateSubnet1, !Ref PrivateSubnet2]
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment

  MigrationProcessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-MigrationProcessor-${Environment}'
      Runtime: python3.11
      Handler: app.lambda_handler
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              return {
                  'statusCode': 200,
                  'body': json.dumps({'message': 'Migration Processor operational - deploy code via workflow'})
              }
      Role: !GetAtt MigrationProcessorRole.Arn
      Timeout: 300
      MemorySize: 512
      VpcConfig:
        SecurityGroupIds: [!Ref LambdaSecurityGroup]
        SubnetIds: [!Ref PrivateSubnet1, !Ref PrivateSubnet2]
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment

  # API Gateway (REST) with CORS
  BackendApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub 'SubscriberMigrationAPI-${Environment}'
      Description: !Sub 'Subscriber Migration Portal API for ${Environment}'
      EndpointConfiguration: { Types: [REGIONAL] }

  ProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt BackendApi.RootResourceId
      PathPart: '{proxy+}'
      RestApiId: !Ref BackendApi

  ProxyMethod:
    Type: AWS::ApiGateway::Method
    DependsOn: BackendLambda
    Properties:
      HttpMethod: ANY
      ResourceId: !Ref ProxyResource
      RestApiId: !Ref BackendApi
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BackendLambda.Arn}/invocations'
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: Empty

  RootProxyMethod:
    Type: AWS::ApiGateway::Method
    DependsOn: BackendLambda
    Properties:
      HttpMethod: ANY
      ResourceId: !GetAtt BackendApi.RootResourceId
      RestApiId: !Ref BackendApi
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BackendLambda.Arn}/invocations'
        PassthroughBehavior: WHEN_NO_MATCH
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: Empty

  ProxyOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId: !Ref ProxyResource
      RestApiId: !Ref BackendApi
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,PATCH'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: Empty

  RootOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: OPTIONS
      ResourceId: !GetAtt BackendApi.RootResourceId
      RestApiId: !Ref BackendApi
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS,PATCH'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          ResponseModels:
            application/json: Empty

  BackendApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ProxyMethod
      - RootProxyMethod
      - ProxyOptionsMethod
      - RootOptionsMethod
    Properties:
      RestApiId: !Ref BackendApi
      Description: !Sub 'Deployment ${Environment} - ${CurrentTime}'

  BackendApiStage:
    Type: AWS::ApiGateway::Stage
    DependsOn: ApiGatewayAccount
    Properties:
      DeploymentId: !Ref BackendApiDeployment
      RestApiId: !Ref BackendApi
      StageName: prod
      Description: !Sub 'Production stage for ${Environment}'
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          LoggingLevel: INFO
          DataTraceEnabled: false
          MetricsEnabled: true

  # Lambda Permissions (Separated to Break Circular Dependencies)
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn: 
      - BackendApiStage
      - BackendLambda
    Properties:
      FunctionName: !Ref BackendLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BackendApi}/*/*'

  # Permissions for S3 to invoke Lambda (S3 notification configured via workflow)
  S3InvokeMigrationProcessorPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref MigrationProcessorFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt MigrationUploadBucket.Arn
      SourceAccount: !Ref AWS::AccountId

  # VPC Endpoints (Created After Lambda Functions to Avoid Dependencies)
  S3VPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcEndpointType: Gateway
      RouteTableIds: [!Ref PrivateRouteTable]

  DynamoDBVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.dynamodb'
      VpcEndpointType: Gateway
      RouteTableIds: [!Ref PrivateRouteTable]

  SecretsManagerVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    DependsOn: LambdaSecurityGroup
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.secretsmanager'
      VpcEndpointType: Interface
      SubnetIds: [!Ref PrivateSubnet1, !Ref PrivateSubnet2]
      SecurityGroupIds: [!Ref LambdaSecurityGroup]
      PrivateDnsEnabled: true
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: 'secretsmanager:GetSecretValue'
            Resource: '*'

Outputs:
  BackendApiId:
    Description: API Gateway RestApi ID
    Value: !Ref BackendApi
    Export: { Name: !Sub '${AWS::StackName}-BackendApiId' }

  BackendApiUrl:
    Description: Base URL for the API Gateway prod stage
    Value: !Sub 'https://${BackendApi}.execute-api.${AWS::Region}.amazonaws.com/prod'
    Export: { Name: !Sub '${AWS::StackName}-BackendApiUrl' }

  BackendLambdaName:
    Description: Name of the backend Lambda function
    Value: !Ref BackendLambda

  BackendLambdaArn:
    Description: ARN of the backend Lambda function
    Value: !GetAtt BackendLambda.Arn

  MigrationProcessorFunctionName:
    Description: Name of the migration processor Lambda function
    Value: !Ref MigrationProcessorFunction

  MigrationProcessorArn:
    Description: ARN of the migration processor Lambda function
    Value: !GetAtt MigrationProcessorFunction.Arn

  FrontendBucketName:
    Description: S3 bucket name for frontend hosting
    Value: !Ref FrontendBucket

  FrontendURL:
    Description: Frontend website URL
    Value: !GetAtt FrontendBucket.WebsiteURL

  MigrationUploadBucketName:
    Description: S3 bucket name for uploads
    Value: !Ref MigrationUploadBucket

  SubscriberTableName:
    Description: DynamoDB Subscriber Table name
    Value: !Ref SubscriberTable

  AuditLogTableName:
    Description: DynamoDB Audit Log Table name
    Value: !Ref AuditLogTable

  MigrationJobsTableName:
    Description: DynamoDB Migration Jobs Table name
    Value: !Ref MigrationJobsTable

  LegacyDBSecretArn:
    Description: ARN of Secrets Manager Legacy DB Secret
    Value: !Ref LegacyDbSecret

  LegacyDBEndpoint:
    Description: RDS legacy database endpoint
    Value: !GetAtt LegacyDatabase.Endpoint.Address

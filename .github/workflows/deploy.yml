name: Deploy Subscriber Migration Portal (Production Ready)

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      development_mode:
        description: 'Deploy in development mode (skip Aurora for faster deployment)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      force_cleanup:
        description: 'Force cleanup of all existing resources'
        required: false
        default: 'false'
        type: boolean
      existing_vpc_id:
        description: 'ID of an existing VPC to reuse, leave blank to create new'
        required: false
        default: ''

env:
  STACK_NAME: subscriber-migration-stack-prod
  AWS_DEFAULT_REGION: us-east-1

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Verify AWS connection and permissions
        run: |
          echo "üîç Verifying AWS connection..."
          aws sts get-caller-identity
          aws ec2 describe-regions --query 'Regions[?RegionName==`us-east-1`].RegionName' --output text
          aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE --max-items 1 >/dev/null 2>&1 || true
          echo "‚úÖ AWS connection verified"

      # Advanced cleanup with orphan resource detection
      - name: Intelligent resource cleanup and health check
        run: |
          set -e
          echo "üßπ Starting intelligent cleanup process..."
          
          # Function to check and delete orphaned RDS instances
          cleanup_orphaned_rds() {
            echo "Checking for orphaned RDS/Aurora instances..."
            ORPHANED_CLUSTERS=$(aws rds describe-db-clusters --query "DBClusters[?contains(DBClusterIdentifier, '$STACK_NAME') && (Status=='creating' || Status=='failed' || Status=='stopped')].DBClusterIdentifier" --output text)
            ORPHANED_INSTANCES=$(aws rds describe-db-instances --query "DBInstances[?contains(DBInstanceIdentifier, '$STACK_NAME') && (DBInstanceStatus=='creating' || DBInstanceStatus=='failed')].DBInstanceIdentifier" --output text)
            
            if [ -n "$ORPHANED_CLUSTERS" ]; then
              echo "üóëÔ∏è Found orphaned Aurora clusters: $ORPHANED_CLUSTERS"
              for cluster in $ORPHANED_CLUSTERS; do
                echo "Deleting orphaned Aurora cluster: $cluster"
                aws rds delete-db-cluster --db-cluster-identifier "$cluster" --skip-final-snapshot --delete-automated-backups || echo "Failed to delete $cluster (might not exist)"
              done
            fi
            
            if [ -n "$ORPHANED_INSTANCES" ]; then
              echo "üóëÔ∏è Found orphaned RDS instances: $ORPHANED_INSTANCES"
              for instance in $ORPHANED_INSTANCES; do
                echo "Deleting orphaned RDS instance: $instance"
                aws rds delete-db-instance --db-instance-identifier "$instance" --skip-final-snapshot --delete-automated-backups || echo "Failed to delete $instance (might not exist)"
              done
            fi
          }
          
          # Check CloudFormation stack status
          STATUS=$(aws cloudformation describe-stacks --stack-name "$STACK_NAME" --query 'Stacks[0].StackStatus' --output text 2>/dev/null || echo "NOT_FOUND")
          echo "üìä Current stack status: $STATUS"
          
          # Force cleanup if requested
          if [ "${{ github.event.inputs.force_cleanup }}" = "true" ]; then
            echo "üö® Force cleanup requested - removing all resources"
            cleanup_orphaned_rds
            if [ "$STATUS" != "NOT_FOUND" ]; then
              aws cloudformation delete-stack --stack-name "$STACK_NAME"
              echo "‚è≥ Waiting for stack deletion..."
              aws cloudformation wait stack-delete-complete --stack-name "$STACK_NAME" || echo "Stack deletion completed or failed"
            fi
          # Auto-cleanup stuck stacks
          elif [[ "$STATUS" =~ ^(ROLLBACK_COMPLETE|ROLLBACK_FAILED|DELETE_FAILED|CREATE_FAILED)$ ]]; then
            echo "üö® Stack is in failed state ($STATUS) - cleaning up"
            cleanup_orphaned_rds
            aws cloudformation delete-stack --stack-name "$STACK_NAME"
            echo "‚è≥ Waiting for stuck stack deletion..."
            aws cloudformation wait stack-delete-complete --stack-name "$STACK_NAME" || echo "Stack deletion completed or timed out"
          else
            echo "‚úÖ Stack is healthy or will be updated in-place"
          fi

      - name: Setup Python environment
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Build and package backend components
        run: |
          echo "üì¶ Building backend components..."
          
          # Main Flask API
          echo "--- Packaging Main Flask API ---"
          cd backend
          if [ ! -f requirements.txt ]; then
            echo "üö® requirements.txt not found in backend/"
            exit 1
          fi
          pip install --no-cache-dir -r requirements.txt -t .
          
          # Copy shared files to migration processor
          if [ -d "migration_processor" ] && [ -f "legacy_db.py" ]; then
            cp legacy_db.py migration_processor/
            echo "‚úÖ Copied legacy_db.py to migration processor"
          fi
          
          # Create main backend package
          zip -r ../backend.zip . -x "*.pyc" "__pycache__/*" "*.git*" "migration_processor/*" "*.pytest_cache/*"
          echo "üì¶ Main backend package created: $(du -h ../backend.zip | cut -f1)"
          cd ..
          
          # Migration Processor
          echo "--- Packaging Migration Processor ---"
          if [ ! -d "backend/migration_processor" ]; then
            echo "üö® migration_processor directory not found!"
            exit 1
          fi
          
          cd backend/migration_processor
          if [ ! -f requirements.txt ]; then
            echo "üö® requirements.txt not found in migration_processor/"
            exit 1
          fi
          
          pip install --no-cache-dir -r requirements.txt -t .
          zip -r ../../processor.zip . -x "*.pyc" "__pycache__/*" "*.pytest_cache/*"
          echo "üì¶ Migration processor package created: $(du -h ../../processor.zip | cut -f1)"
          cd ../..

      - name: Deploy CloudFormation stack with monitoring
        id: deploy_stack
        timeout-minutes: 30
        run: |
          echo "üöÄ Deploying CloudFormation stack..."
          
          # Determine development mode
          DEV_MODE="${{ github.event.inputs.development_mode }}"
          if [ -z "$DEV_MODE" ]; then
            DEV_MODE="false"
          fi
          
          echo "üìã Deployment configuration:"
          echo "  Stack Name: $STACK_NAME"
          echo "  Development Mode: $DEV_MODE"
          echo "  Region: $AWS_DEFAULT_REGION"
          
          EXISTING_VPC_ID="${{ github.event.inputs.existing_vpc_id }}"
          
          cd aws
          aws cloudformation deploy \
            --template-file cloudformation.yaml \
            --stack-name "$STACK_NAME" \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              DomainName="${{ secrets.DOMAIN_NAME }}" \
              LegacyDBPassword="${{ secrets.LEGACY_DB_PASSWORD }}" \
              DevelopmentMode="$DEV_MODE" \
              ExistingVPCId="$EXISTING_VPC_ID" \
            --no-fail-on-empty-changeset
          
          echo "‚úÖ CloudFormation deployment completed successfully"

      # (Remaining workflow steps unchanged)
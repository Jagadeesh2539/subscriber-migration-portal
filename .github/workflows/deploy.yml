name: Deploy Subscriber Migration Portal

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Configure AWS
      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Step 3: Deploy CloudFormation stack
      - name: Deploy CloudFormation Stack
        run: |
          cd aws
          aws cloudformation deploy \
            --template-file cloudformation.yaml \
            --stack-name subscriber-migration-stack-v3 \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM \
            --parameter-overrides DomainName=${{ secrets.DOMAIN_NAME }}

      # Step 4: Zip backend with dependencies
      - name: Prepare Backend Lambda Package
        run: |
          cd backend
          # Clean previous packages
          rm -rf lambda_package backend.zip
          # Create folder for Lambda package
          mkdir -p lambda_package
          # Install dependencies into package
          pip install --target ./lambda_package -r requirements.txt
          # Copy all backend code
          cp *.py lambda_package/
          # Zip everything
          cd lambda_package
          zip -r ../backend.zip .
          cd ..
          # Update Lambda function
          FUNCTION_NAME=subscriber-backend-${{ secrets.AWS_ACCOUNT_ID }}-us-east-1
          aws lambda update-function-code \
            --function-name $FUNCTION_NAME \
            --zip-file fileb://backend.zip

      # Step 5: Build and deploy frontend
      - name: Deploy Frontend
        run: |
          cd frontend
          npm install
          npm run build
          aws s3 sync build/ s3://subscriber-portal-${{ secrets.AWS_ACCOUNT_ID }}-us-east-1 --delete

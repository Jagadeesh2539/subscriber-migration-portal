AWSTemplateFormatVersion: "2010-09-09"
Description: Full Subscriber Migration Portal Infrastructure with RDS and enhanced DynamoDB

Parameters:
  DomainName:
    Type: String
    Description: "Optional domain name for the frontend site"
  LegacyDBPassword:
    Type: String
    Description: "Password for the legacy MySQL database. Min 8 characters."
    NoEcho: true
    AllowedPattern: ".{8,}"
    ConstraintDescription: "Must be at least 8 characters."

Resources:

  # ---------------------------------------------------------------------
  # Networking (VPC, Subnets, etc.)
  # ---------------------------------------------------------------------
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-VPC"

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Public-1"
  
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Public-2"

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.10.0/24
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Private-1"

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.11.0/24
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Private-2"

  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: GatewayAttachment
    Properties:
      Domain: vpc
  
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable
      
  # ---------------------------------------------------------------------
  # Security Groups and DB Secret
  # ---------------------------------------------------------------------
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-Lambda-SG"
      VpcId: !Ref VPC
      GroupDescription: "Security group for Lambda functions"
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-RDS-SG"
      VpcId: !Ref VPC
      GroupDescription: "Security group for RDS instance"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref LambdaSecurityGroup

  LegacyDBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: "Credentials for the legacy MySQL database"
      GenerateSecretString:
        SecretStringTemplate: '{"username": "admin"}'
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludeCharacters: '"@/\\'

  # ---------------------------------------------------------------------
  # RDS MySQL Database Instance
  # ---------------------------------------------------------------------
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnet group for the legacy RDS instance"
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  LegacyDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: "legacydb"
      Engine: "mysql"
      EngineVersion: "8.0"
      DBInstanceClass: "db.t3.micro"
      AllocatedStorage: "20"
      MasterUsername: !Sub '{{resolve:secretsmanager:${LegacyDBSecret}:SecretString:username}}'
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${LegacyDBSecret}:SecretString:password}}'
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      PubliclyAccessible: false
      StorageType: "gp2"
      DeletionProtection: false
      MultiAZ: false

  # ---------------------------------------------------------------------
  # S3 Buckets for Frontend and Migrations
  # ---------------------------------------------------------------------
  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "subscriber-portal-${AWS::AccountId}-${AWS::Region}"
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Sub "${FrontendBucket.Arn}/*"

  MigrationUploadBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "migration-uploads-${AWS::AccountId}-${AWS::Region}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - PUT
              - POST
            AllowedOrigins:
              - !Sub "http://subscriber-portal-${AWS::AccountId}-${AWS::Region}.s3-website.${AWS::Region}.amazonaws.com"
              - http://localhost:3000

  # ---------------------------------------------------------------------
  # DynamoDB Tables
  # ---------------------------------------------------------------------
  SubscriberTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "SubscriberTable-${AWS::AccountId}-${AWS::Region}"
      AttributeDefinitions:
        - AttributeName: subscriberId
          AttributeType: S
        - AttributeName: imsi
          AttributeType: S
        - AttributeName: msisdn
          AttributeType: S
      KeySchema:
        - AttributeName: subscriberId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: ImsiIndex
          KeySchema:
            - AttributeName: imsi
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: MsisdnIndex
          KeySchema:
            - AttributeName: msisdn
              KeyType: HASH
          Projection:
            ProjectionType: ALL

  AuditLogTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "AuditLogTable-${AWS::AccountId}-${AWS::Region}"
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST

  MigrationJobsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "MigrationJobsTable-${AWS::AccountId}-${AWS::Region}"
      AttributeDefinitions:
        - AttributeName: migrationId
          AttributeType: S
      KeySchema:
        - AttributeName: migrationId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # ---------------------------------------------------------------------
  # IAM Roles for Lambdas
  # ---------------------------------------------------------------------
  BackendLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "SubscriberBackendRole-${AWS::AccountId}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: SecretReadPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: secretsmanager:GetSecretValue
                Resource: !Ref LegacyDBSecret

  MigrationProcessorRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "MigrationProcessorRole-${AWS::AccountId}"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: MigrationProcessorPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                Resource: !Sub "${MigrationUploadBucket.Arn}/*"
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                Resource:
                  - !GetAtt MigrationJobsTable.Arn
                  - !GetAtt SubscriberTable.Arn
                  - !GetAtt AuditLogTable.Arn
              - Effect: Allow
                Action: secretsmanager:GetSecretValue
                Resource: !Ref LegacyDBSecret

  # ---------------------------------------------------------------------
  # Lambda Functions
  # ---------------------------------------------------------------------
  BackendLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "subscriber-backend-${AWS::AccountId}-${AWS::Region}"
      Handler: app.lambda_handler
      Runtime: python3.11
      Role: !GetAtt BackendLambdaRole.Arn
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {"statusCode": 200, "body": "Lambda created"}
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2

  MigrationProcessorFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "migration-processor-${AWS::AccountId}-${AWS::Region}"
      Handler: app.lambda_handler
      Runtime: python3.11
      Role: !GetAtt MigrationProcessorRole.Arn
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {"statusCode": 200, "body": "Migration Processor Lambda created"}
      Timeout: 300
      Environment:
        Variables:
          SUBSCRIBER_TABLE_NAME: !Ref SubscriberTable
          AUDIT_LOG_TABLE_NAME: !Ref AuditLogTable
          MIGRATION_JOBS_TABLE_NAME: !Ref MigrationJobsTable
          REPORT_BUCKET_NAME: !Ref MigrationUploadBucket
          LEGACY_DB_SECRET_ARN: !Ref LegacyDBSecret
          LEGACY_DB_HOST: !GetAtt LegacyDBInstance.Endpoint.Address
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2

  # ---------------------------------------------------------------------
  # S3 Trigger for Migration (Corrected Syntax)
  # ---------------------------------------------------------------------
  MigrationUploadTriggerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt MigrationProcessorFunction.Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt MigrationUploadBucket.Arn
      # Add SourceAccount to restrict which account can trigger
      SourceAccount: !Ref AWS::AccountId

  S3TriggerConfiguration:
    Type: Custom::S3LambdaTrigger # Using a custom resource type for clarity
    DependsOn: MigrationUploadTriggerPermission # Ensure permission exists first
    Properties:
      ServiceToken: !GetAtt AddS3NotificationFunction.Arn # Reference a Lambda function to configure S3 (see below)
      BucketName: !Ref MigrationUploadBucket
      LambdaArn: !GetAtt MigrationProcessorFunction.Arn

  # Helper Lambda Function and Role to add S3 Notification (Workaround for complex Filters)
  AddS3NotificationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: lambda.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3PutNotificationPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: s3:PutBucketNotification
                Resource: !GetAtt MigrationUploadBucket.Arn

  AddS3NotificationFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt AddS3NotificationRole.Arn
      Runtime: python3.9
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import json

          s3 = boto3.client('s3')

          def handler(event, context):
              response_status = cfnresponse.SUCCESS
              response_data = {}
              physical_resource_id = event.get('PhysicalResourceId')

              try:
                  if event['RequestType'] in ['Create', 'Update']:
                      bucket_name = event['ResourceProperties']['BucketName']
                      lambda_arn = event['ResourceProperties']['LambdaArn']
                      
                      notification_config = {
                          'LambdaFunctionConfigurations': [
                              {
                                  'Id': 'MigrationProcessorTrigger',
                                  'LambdaFunctionArn': lambda_arn,
                                  'Events': ['s3:ObjectCreated:Put'],
                                  'Filter': {
                                      'Key': {
                                          'FilterRules': [
                                              {'Name': 'prefix', 'Value': 'uploads/'},
                                              {'Name': 'suffix', 'Value': '.csv'}
                                          ]
                                      }
                                  }
                              }
                          ]
                      }
                      
                      s3.put_bucket_notification_configuration(
                          Bucket=bucket_name,
                          NotificationConfiguration=notification_config
                      )
                      print(f"Set S3 notification for bucket {bucket_name}")
                      # Use bucket name as physical ID for updates/deletes
                      physical_resource_id = f"s3-notification-{bucket_name}"

                  elif event['RequestType'] == 'Delete':
                      bucket_name = event['ResourceProperties']['BucketName']
                      # On delete, remove the notification configuration
                      s3.put_bucket_notification_configuration(
                          Bucket=bucket_name,
                          NotificationConfiguration={}
                      )
                      print(f"Removed S3 notification for bucket {bucket_name}")

              except Exception as e:
                  print(f"Error configuring S3 notification: {e}")
                  response_status = cfnresponse.FAILED
                  response_data = {'Error': str(e)}

              cfnresponse.send(event, context, response_status, response_data, physical_resource_id)

  # ---------------------------------------------------------------------
  # API Gateway
  # ---------------------------------------------------------------------
  BackendApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "migration-portal-api-${AWS::Region}"
      Description: "API for the Subscriber Migration Portal"
      EndpointConfiguration:
        Types:
          - REGIONAL

  ApiProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt BackendApi.RootResourceId
      RestApiId: !Ref BackendApi
      PathPart: "{proxy+}"

  ApiProxyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BackendLambda.Arn}/invocations"
      ResourceId: !Ref ApiProxyResource
      RestApiId: !Ref BackendApi

  ApiRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BackendLambda.Arn}/invocations"
      ResourceId: !GetAtt BackendApi.RootResourceId
      RestApiId: !Ref BackendApi

  LambdaApiPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref BackendLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BackendApi}/*/*"

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - ApiProxyMethod
      - ApiRootMethod
    Properties:
      RestApiId: !Ref BackendApi

  ApiProdStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: prod
      Description: Production Stage
      RestApiId: !Ref BackendApi
      DeploymentId: !Ref ApiDeployment

Outputs:
  FrontendURL:
    Description: URL of the frontend
    Value: !Sub "http://${FrontendBucket}.s3-website.${AWS::Region}.amazonaws.com"

  SubscriberTableName:
    Description: DynamoDB subscriber table
    Value: !Ref SubscriberTable

  AuditLogTableName:
    Description: DynamoDB audit log table
    Value: !Ref AuditLogTable

  MigrationJobsTableName:
    Description: DynamoDB table to track migration jobs
    Value: !Ref MigrationJobsTable

  MigrationUploadBucketName:
    Description: S3 bucket for CSV uploads
    Value: !Ref MigrationUploadBucket

  BackendLambdaName:
    Description: Name of the backend Lambda
    Value: !Ref BackendLambda

  MigrationProcessorFunctionName:
    Description: Name of the migration processor Lambda
    Value: !Ref MigrationProcessorFunction
    
  BackendApiId:
    Description: The ID of the new API Gateway
    Value: !Ref BackendApi

  BackendApiUrl:
    Description: The public URL for the API Gateway prod stage
    Value: !Sub "https://${BackendApi}.execute-api.${AWS::Region}.amazonaws.com/prod"

  LegacyDBEndpoint:
    Description: "The connection endpoint for the legacy MySQL database"
    Value: !GetAtt LegacyDBInstance.Endpoint.Address

  LegacyDBSecretArn:
    Description: "The ARN of the secret containing the DB credentials"
    Value: !Ref LegacyDBSecret

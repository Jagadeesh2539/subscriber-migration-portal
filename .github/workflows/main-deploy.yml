name: üöÄ Deploy Consolidated Portal

on:
  workflow_dispatch:
    inputs:
      deploy_type:
        description: 'Deployment type'
        required: false
        default: 'full'
        type: choice
        options:
          - 'full'
          - 'frontend-only'
          - 'backend-only'
      use_npm_ci:
        description: 'Use npm ci for reproducible builds (recommended)'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

env:
  AWS_DEFAULT_REGION: us-east-1
  FRONTEND_BUCKET: subscriber-migration-stack-prod-frontend
  BACKEND_LAMBDA: subscriber-migration-stack-prod-BackendLambda-pw0yiCxXyN3J
  API_GATEWAY_ID: hsebznxeu6

jobs:
  deploy:
    name: üéØ Deploy Consolidated Portal
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: üîê Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: üé® Build and deploy frontend
        if: github.event.inputs.deploy_type != 'backend-only'
        run: |
          cd frontend
          echo "üì¶ Installing frontend dependencies..."
          
          if [ "${{ github.event.inputs.use_npm_ci }}" = "true" ]; then
            echo "üîí Using npm ci for reproducible build..."
            npm ci --legacy-peer-deps
          else
            echo "üì¶ Using npm install for compatibility..."
            # Clear cache and remove lockfile for install mode
            npm cache clean --force 2>/dev/null || true
            rm -f package-lock.json npm-shrinkwrap.json yarn.lock pnpm-lock.yaml
            rm -rf node_modules 2>/dev/null || true
            
            npm install --no-package-lock --no-audit --no-fund --legacy-peer-deps --force
          fi
          
          echo "‚úÖ Dependencies installed successfully"
          npm list --depth=0 || true
          
          # Set production environment
          cat > .env.production << EOF
          REACT_APP_API_BASE_URL=https://${{ env.API_GATEWAY_ID }}.execute-api.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com/prod
          REACT_APP_VERSION=2.0.0-production
          REACT_APP_LEGACY_ENABLED=true
          REACT_APP_CLOUD_ENABLED=true
          REACT_APP_DUAL_PROV_ENABLED=true
          REACT_APP_PROVISIONING_MODES=legacy,cloud,dual_prov
          EOF
          
          echo "üî® Building production frontend..."
          NODE_OPTIONS="--max-old-space-size=8192" npm run build
          
          echo "‚òÅÔ∏è Deploying to S3..."
          aws s3 sync build/ s3://${{ env.FRONTEND_BUCKET }}/ \
            --delete \
            --cache-control "public, max-age=0, must-revalidate"
          
          echo "‚úÖ Frontend deployed successfully"

      - name: üîß Build and deploy backend
        if: github.event.inputs.deploy_type != 'frontend-only'
        run: |
          cd backend
          echo "üì¶ Installing backend dependencies..."
          
          # Install Python dependencies with caching
          pip install --no-cache-dir --target . -r requirements.txt
          
          # Use the consolidated app.py as entry point
          echo "üîß Using consolidated app.py as Lambda handler..."
          cp app.py lambda_function.py
          
          echo "üì¶ Creating deployment package..."
          zip -q -r ../backend-deploy.zip . \
            -x "*.pyc" "__pycache__/*" "*.git*" \
               "app_*.py" "*.md" "Dockerfile" \
               "setup_legacy_schema.py" "*.log" \
               "migration_processor/*" "*backup*" \
               "lambda_handler_enhanced.py" "subscriber_enhanced.py" \
               "migration -backup.py" "monitoring.py" "reporting.py"
          
          cd ..
          echo "üìä Package size: $(du -sh backend-deploy.zip | cut -f1)"
          
          echo "üöÄ Deploying to Lambda..."
          aws lambda update-function-code \
            --function-name ${{ env.BACKEND_LAMBDA }} \
            --zip-file fileb://backend-deploy.zip
          
          echo "‚è≥ Waiting for Lambda update..."
          aws lambda wait function-updated \
            --function-name ${{ env.BACKEND_LAMBDA }}
          
          echo "‚öôÔ∏è Setting environment variables for consolidated app..."
          aws lambda update-function-configuration \
            --function-name ${{ env.BACKEND_LAMBDA }} \
            --environment '{
              "Variables": {
                "SUBSCRIBER_TABLE_NAME": "subscriber-table",
                "AUDIT_LOG_TABLE_NAME": "audit-log-table",
                "MIGRATION_JOBS_TABLE_NAME": "migration-jobs-table",
                "MIGRATION_UPLOAD_BUCKET_NAME": "subscriber-migration-stack-prod-migration-uploads",
                "LEGACY_DB_SECRET_ARN": "arn:aws:secretsmanager:us-east-1:144395889420:secret:subscriber-legacy-db-secret-qWXjZz",
                "LEGACY_DB_HOST": "subscriber-migration-legacydb.cwd6wssgy4kr.us-east-1.rds.amazonaws.com",
                "LEGACY_DB_PORT": "3306",
                "LEGACY_DB_NAME": "legacydb",
                "FLASK_ENV": "production",
                "VERSION": "2.0.0-production",
                "PROVISIONING_MODES": "legacy,cloud,dual_prov",
                "JWT_SECRET": "subscriber-portal-jwt-secret-2025-production"
              }
            }'
          
          aws lambda wait function-updated \
            --function-name ${{ env.BACKEND_LAMBDA }}
          
          echo "‚úÖ Backend deployed successfully with consolidated app.py"

      - name: üîÑ Update API Gateway
        if: github.event.inputs.deploy_type != 'frontend-only'
        run: |
          echo "üîÑ Creating new API deployment..."
          
          DEPLOYMENT_ID=$(aws apigateway create-deployment \
            --rest-api-id ${{ env.API_GATEWAY_ID }} \
            --description "Consolidated Portal $(date +%Y%m%d-%H%M%S)" \
            --query 'id' --output text)
          
          aws apigateway update-stage \
            --rest-api-id ${{ env.API_GATEWAY_ID }} \
            --stage-name prod \
            --patch-operations op=replace,path=/deploymentId,value=$DEPLOYMENT_ID
          
          echo "‚úÖ API Gateway updated"

      - name: üß™ Test consolidated deployment
        run: |
          API_URL="https://${{ env.API_GATEWAY_ID }}.execute-api.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com/prod"
          FRONTEND_URL="http://${{ env.FRONTEND_BUCKET }}.s3-website-${{ env.AWS_DEFAULT_REGION }}.amazonaws.com"
          
          echo "üß™ Testing consolidated deployment..."
          echo "‚è≥ Waiting 60s for propagation..."
          sleep 60
          
          # Test API Health
          echo "1Ô∏è‚É£ API Health Check:"
          API_HEALTH=$(curl -s -w "%{http_code}" -o /tmp/health.json "$API_URL/api/health")
          echo "   Status: $API_HEALTH"
          if [ "$API_HEALTH" = "200" ]; then
            echo "   Version: $(cat /tmp/health.json | jq -r '.version' 2>/dev/null || echo 'N/A')"
            echo "   Services: $(cat /tmp/health.json | jq -r '.data.services | keys | join(", ")' 2>/dev/null || echo 'N/A')"
          else
            echo "   Error response: $(cat /tmp/health.json 2>/dev/null || echo 'No response')"
          fi
          
          # Test Frontend
          echo "2Ô∏è‚É£ Frontend Status:"
          FRONTEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$FRONTEND_URL")
          echo "   Status: $FRONTEND_STATUS"
          
          # Test JWT Authentication
          echo "3Ô∏è‚É£ JWT Authentication:"
          AUTH_RESPONSE=$(curl -s -X POST "$API_URL/api/auth/login" \
            -H "Content-Type: application/json" \
            -d '{"username":"admin","password":"Admin@123"}' \
            -w "%{http_code}" -o /tmp/auth.json)
          echo "   Status: $AUTH_RESPONSE"
          if [ "$AUTH_RESPONSE" = "200" ]; then
            echo "   Role: $(cat /tmp/auth.json | jq -r '.data.user.role' 2>/dev/null || echo 'N/A')"
            echo "   Token: $(cat /tmp/auth.json | jq -r '.data.token[:20]' 2>/dev/null || echo 'N/A')..."
            
            # Extract token for authenticated tests
            TOKEN=$(cat /tmp/auth.json | jq -r '.data.token' 2>/dev/null)
          else
            echo "   Auth failed: $(cat /tmp/auth.json 2>/dev/null || echo 'No response')"
            TOKEN=""
          fi
          
          # Test Protected Dashboard (with JWT)
          echo "4Ô∏è‚É£ Dashboard Stats (Protected):"
          if [ -n "$TOKEN" ]; then
            STATS_RESPONSE=$(curl -s "$API_URL/api/dashboard/stats" \
              -H "Authorization: Bearer $TOKEN" \
              -w "%{http_code}" -o /tmp/stats.json)
            echo "   Status: $STATS_RESPONSE"
            if [ "$STATS_RESPONSE" = "200" ]; then
              echo "   Total Subscribers: $(cat /tmp/stats.json | jq -r '.data.totalSubscribers' 2>/dev/null || echo 'N/A')"
              echo "   System Health: $(cat /tmp/stats.json | jq -r '.data.systemHealth' 2>/dev/null || echo 'N/A')"
            else
              echo "   Stats error: $(cat /tmp/stats.json 2>/dev/null || echo 'No response')"
            fi
          else
            echo "   Skipped (no auth token)"
            STATS_RESPONSE="N/A"
          fi
          
          # Test Legacy DB (Protected)
          echo "5Ô∏è‚É£ Legacy Database (Protected):"
          if [ -n "$TOKEN" ]; then
            LEGACY_RESPONSE=$(curl -s "$API_URL/api/legacy/test" \
              -H "Authorization: Bearer $TOKEN" \
              -w "%{http_code}" -o /tmp/legacy.json)
            echo "   Status: $LEGACY_RESPONSE"
            if [ "$LEGACY_RESPONSE" = "200" ]; then
              echo "   Connection: $(cat /tmp/legacy.json | jq -r '.data.status' 2>/dev/null || echo 'Connected')"
            else
              echo "   Legacy DB: VPC/Security Group setup needed (expected)"
            fi
          else
            echo "   Skipped (no auth token)"
            LEGACY_RESPONSE="N/A"
          fi
          
          echo ""
          echo "üìã CONSOLIDATED DEPLOYMENT SUMMARY:"
          echo "   üîó API:        $([ "$API_HEALTH" = "200" ] && echo "‚úÖ Working" || echo "‚ùå Failed ($API_HEALTH)")"
          echo "   üåê Frontend:   $([ "$FRONTEND_STATUS" = "200" ] && echo "‚úÖ Live" || echo "‚ùå Failed ($FRONTEND_STATUS)")"
          echo "   üîê JWT Auth:   $([ "$AUTH_RESPONSE" = "200" ] && echo "‚úÖ Working" || echo "‚ùå Failed ($AUTH_RESPONSE)")"
          echo "   üìä Dashboard:  $([ "$STATS_RESPONSE" = "200" ] && echo "‚úÖ Protected" || echo "‚ö†Ô∏è Auth Required")"
          echo "   üóÑÔ∏è Legacy DB:  $([ "$LEGACY_RESPONSE" = "200" ] && echo "‚úÖ Connected" || echo "‚ö†Ô∏è VPC Config Needed")"
          
          if [ "$API_HEALTH" = "200" ] && [ "$FRONTEND_STATUS" = "200" ] && [ "$AUTH_RESPONSE" = "200" ]; then
            echo ""
            echo "üéâ CONSOLIDATED DEPLOYMENT SUCCESSFUL!"
            echo "üåê Portal: $FRONTEND_URL"
            echo "üîê Login: admin/Admin@123 (JWT secured)"
            echo "‚ú® Features: Dashboard, Provisioning, Migration, Analytics"
            echo "üéØ Architecture: Single API + Single Frontend + JWT Security"
            echo "üõ°Ô∏è Security: JWT tokens, secure password hashing, audit logging"
            echo "üì¶ Dependencies: $([ "${{ github.event.inputs.use_npm_ci }}" = "true" ] && echo "Reproducible (npm ci)" || echo "Compatible (npm install)")"
            
            if [ "$LEGACY_RESPONSE" != "200" ]; then
              echo ""
              echo "üí° Next: Configure Lambda VPC for full legacy integration"
              echo "   All cloud features are fully functional"
            else
              echo "üöÄ All systems operational - ready for enterprise use!"
            fi
          else
            echo ""
            echo "‚ùå Core deployment failed - check logs above"
            exit 1
          fi
          
          # Cleanup
          rm -f backend-deploy.zip /tmp/*.json
name: ⚙️ Backend CI

on:
  pull_request:
    paths: ['backend/**', '.github/workflows/**']
  push:
    branches: [develop, feature/*]
    paths: ['backend/**']

env:
  PYTHON_VERSION: '3.11'
  AWS_REGION: us-east-1

jobs:
  lint-and-test:
    name: 🔍 Lint & Test
    runs-on: ubuntu-latest
    steps:
      - name: 🔄 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          
      - name: 📥 Install Development Dependencies
        run: |
          pip install flake8 black isort pytest
          cd backend
          pip install -r requirements.txt
          
      - name: 🎨 Code Formatting Check
        run: |
          cd backend
          echo "🎨 Checking code formatting with Black..."
          black --check --diff app.py || true
          
      - name: 📋 Import Sorting Check
        run: |
          cd backend
          echo "📋 Checking import sorting..."
          isort --check-only --diff app.py || true
          
      - name: 🔍 Lint with flake8
        run: |
          cd backend
          echo "🔍 Running flake8 linting..."
          flake8 app.py --max-line-length=120 --ignore=E501,W503,E203 || true
          
      - name: 🔍 Syntax Check
        run: |
          cd backend
          echo "🔍 Checking Python syntax..."
          python -m py_compile app.py
          echo "✅ Syntax check passed"
          
      - name: 📦 Test Package Build
        run: |
          cd backend
          echo "📦 Testing package build..."
          
          # Create test package
          mkdir -p test-package
          pip install -r requirements.txt -t test-package/ --quiet
          cp app.py test-package/
          
          # Create zip
          cd test-package
          zip -r ../test-lambda-package.zip . -q
          cd ..
          
          # Check package size
          SIZE=$(stat -f%z test-lambda-package.zip 2>/dev/null || stat -c%s test-lambda-package.zip)
          SIZE_MB=$(echo "scale=2; $SIZE/1024/1024" | bc)
          
          echo "📊 Package size: ${SIZE_MB}MB"
          
          if (( $(echo "$SIZE_MB > 50" | bc -l) )); then
            echo "⚠️ Warning: Package size exceeds 50MB limit for direct Lambda upload"
          else
            echo "✅ Package size is within limits"
          fi
          
          # Cleanup
          rm -rf test-package test-lambda-package.zip

  security-check:
    name: 🔒 Security Check
    runs-on: ubuntu-latest
    steps:
      - name: 🔄 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: 📥 Install Security Tools
        run: |
          pip install bandit safety
          cd backend
          pip install -r requirements.txt
          
      - name: 🔒 Run Bandit Security Scan
        run: |
          cd backend
          echo "🔒 Running security scan with Bandit..."
          bandit -r app.py -f json -o bandit-report.json || true
          
          if [ -f bandit-report.json ]; then
            HIGH_ISSUES=$(jq '.metrics."_totals"."SEVERITY.HIGH"' bandit-report.json 2>/dev/null || echo 0)
            MEDIUM_ISSUES=$(jq '.metrics."_totals"."SEVERITY.MEDIUM"' bandit-report.json 2>/dev/null || echo 0)
            
            echo "📊 Security scan results:"
            echo "  High severity issues: $HIGH_ISSUES"
            echo "  Medium severity issues: $MEDIUM_ISSUES"
            
            if [ "$HIGH_ISSUES" -gt "0" ]; then
              echo "⚠️ High severity security issues found"
              jq '.results[]' bandit-report.json 2>/dev/null || true
            else
              echo "✅ No high severity security issues found"
            fi
          fi
          
      - name: 🔒 Check Dependencies for Known Vulnerabilities
        run: |
          cd backend
          echo "🔒 Checking dependencies for known vulnerabilities..."
          safety check -r requirements.txt || true

  validate-config:
    name: ⚙️ Validate Configuration
    runs-on: ubuntu-latest
    steps:
      - name: 🔄 Checkout Code
        uses: actions/checkout@v4
        
      - name: ⚙️ Validate Lambda Handler
        run: |
          cd backend
          echo "⚙️ Validating Lambda handler configuration..."
          
          # Check if lambda_handler function exists
          if grep -q "def lambda_handler" app.py; then
            echo "✅ lambda_handler function found"
          else
            echo "❌ lambda_handler function not found"
            exit 1
          fi
          
          # Check for required imports
          REQUIRED_IMPORTS=("json" "logging" "datetime" "boto3" "flask")
          for import in "${REQUIRED_IMPORTS[@]}"; do
            if grep -q "import $import" app.py; then
              echo "✅ $import imported"
            else
              echo "⚠️ $import not found in imports"
            fi
          done
          
      - name: 📋 Validate Requirements
        run: |
          cd backend
          echo "📋 Validating requirements.txt..."
          
          if [ ! -f requirements.txt ]; then
            echo "❌ requirements.txt not found"
            exit 1
          fi
          
          # Check for required packages
          REQUIRED_PACKAGES=("Flask" "boto3" "PyJWT" "PyMySQL" "serverless-wsgi")
          for package in "${REQUIRED_PACKAGES[@]}"; do
            if grep -qi "$package" requirements.txt; then
              echo "✅ $package found in requirements"
            else
              echo "⚠️ $package not found in requirements.txt"
            fi
          done

  api-structure-check:
    name: 🔗 API Structure Check
    runs-on: ubuntu-latest
    steps:
      - name: 🔄 Checkout Code
        uses: actions/checkout@v4
        
      - name: 🔍 Check API Endpoints
        run: |
          cd backend
          echo "🔗 Checking API endpoint coverage..."
          
          # Required endpoints for frontend features
          REQUIRED_ENDPOINTS=(
            "/api/health"
            "/api/auth/login"
            "/api/auth/logout"
            "/api/dashboard/stats"
            "/api/subscribers"
            "/api/operations/bulk-delete"
            "/api/audit/compare"
            "/api/migration/jobs"
            "/api/migration/upload"
            "/api/analytics"
            "/api/config/provisioning-mode"
            "/api/provision/dashboard"
            "/api/export"
            "/api/audit/logs"
          )
          
          MISSING_ENDPOINTS=()
          
          for endpoint in "${REQUIRED_ENDPOINTS[@]}"; do
            if grep -q "$endpoint" app.py; then
              echo "✅ $endpoint"
            else
              echo "❌ $endpoint - MISSING"
              MISSING_ENDPOINTS+=("$endpoint")
            fi
          done
          
          if [ ${#MISSING_ENDPOINTS[@]} -eq 0 ]; then
            echo "🎉 All required API endpoints are implemented!"
          else
            echo "⚠️ Missing ${#MISSING_ENDPOINTS[@]} endpoints:"
            printf '%s\n' "${MISSING_ENDPOINTS[@]}"
          fi
          
      - name: 🔐 Check Authentication Implementation
        run: |
          cd backend
          echo "🔐 Checking authentication implementation..."
          
          if grep -q "require_auth" app.py; then
            echo "✅ Authentication decorator found"
          else
            echo "❌ Authentication decorator missing"
          fi
          
          if grep -q "JWT" app.py; then
            echo "✅ JWT implementation found"
          else
            echo "❌ JWT implementation missing"
          fi

  comment-pr:
    name: 💬 Comment on PR
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-check, validate-config, api-structure-check]
    if: github.event_name == 'pull_request'
    steps:
      - name: 💬 Add PR Comment
        uses: actions/github-script@v6
        with:
          script: |
            const checkResults = {
              lintTest: '${{ needs.lint-and-test.result }}',
              security: '${{ needs.security-check.result }}',
              config: '${{ needs.validate-config.result }}',
              apiStructure: '${{ needs.api-structure-check.result }}'
            };
            
            const allPassed = Object.values(checkResults).every(result => result === 'success');
            const status = allPassed ? '🟢 READY' : '🟡 NEEDS ATTENTION';
            
            const body = `## ⚙️ Backend CI Results
            
            **Status:** ${status}
            
            ### 📋 Check Results
            - **Lint & Test:** ${checkResults.lintTest === 'success' ? '✅ Passed' : '❌ Failed'}
            - **Security Scan:** ${checkResults.security === 'success' ? '✅ Passed' : '❌ Failed'} 
            - **Config Validation:** ${checkResults.config === 'success' ? '✅ Passed' : '❌ Failed'}
            - **API Structure:** ${checkResults.apiStructure === 'success' ? '✅ Passed' : '❌ Failed'}
            
            ### 📦 Package Information
            - **Python Version:** 3.11
            - **Dependencies:** Validated
            - **Lambda Handler:** Validated
            
            ${allPassed ? 
              '### 🎉 Ready for Deployment\n\nAll checks passed! This PR is ready to be merged and deployed.' :
              '### ⚠️ Action Required\n\nSome checks failed. Please review the details above and fix any issues.'}
            
            ---
            
            **Next Steps:** ${allPassed ? 'Merge this PR to trigger automatic deployment to development environment.' : 'Fix failing checks and push updates.'}`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
{
  "Comment": "Subscriber Export Workflow - System-generated exports with data merging from Cloud and Legacy",
  "StartAt": "InitializeExport",
  "TimeoutSeconds": 2400,
  "States": {
    "InitializeExport": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName": "${MigrationJobsTable}",
        "Key": {
          "job_id": {
            "S.$": "$.jobId"
          }
        },
        "UpdateExpression": "SET job_status = :status, started_at = :timestamp",
        "ExpressionAttributeValues": {
          ":status": {"S": "RUNNING"},
          ":timestamp": {"S.$": "$$.State.EnteredTime"}
        }
      },
      "ResultPath": null,
      "Next": "DetermineExportScope"
    },
    
    "DetermineExportScope": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.exportScope",
          "StringEquals": "CLOUD_ONLY",
          "Next": "ExportCloudOnly"
        },
        {
          "Variable": "$.exportScope",
          "StringEquals": "LEGACY_ONLY", 
          "Next": "ExportLegacyOnly"
        },
        {
          "Variable": "$.exportScope",
          "StringEquals": "BOTH_SYSTEMS",
          "Next": "ExportBothSystems"
        },
        {
          "Variable": "$.exportScope",
          "StringEquals": "COMPARISON",
          "Next": "ExportComparison"
        }
      ],
      "Default": "ExportBothSystems"
    },
    
    "ExportCloudOnly": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${ProcessExportLambdaArn}",
        "Payload": {
          "jobId.$": "$.jobId",
          "source": "cloud",
          "filters.$": "$.filters",
          "format.$": "$.format",
          "includeHeaders": true,
          "maskPii.$": "$.maskPii"
        }
      },
      "ResultPath": "$.result",
      "Next": "ProcessingComplete",
      "Retry": [
        {
          "ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException"],
          "IntervalSeconds": 10,
          "MaxAttempts": 3,
          "BackoffRate": 2.0
        }
      ],
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "ExportFailed",
          "ResultPath": "$.error"
        }
      ]
    },
    
    "ExportLegacyOnly": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${ProcessExportLambdaArn}",
        "Payload": {
          "jobId.$": "$.jobId",
          "source": "legacy",
          "filters.$": "$.filters",
          "format.$": "$.format",
          "includeHeaders": true,
          "maskPii.$": "$.maskPii"
        }
      },
      "ResultPath": "$.result",
      "Next": "ProcessingComplete",
      "Retry": [
        {
          "ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException"],
          "IntervalSeconds": 15,
          "MaxAttempts": 2,
          "BackoffRate": 3.0
        }
      ],
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "ExportFailed",
          "ResultPath": "$.error"
        }
      ]
    },
    
    "ExportBothSystems": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "ExportFromCloud",
          "States": {
            "ExportFromCloud": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${ProcessExportLambdaArn}",
                "Payload": {
                  "jobId.$": "$.jobId",
                  "source": "cloud",
                  "filters.$": "$.filters",
                  "format": "json",
                  "maskPii.$": "$.maskPii",
                  "tempExport": true
                }
              },
              "End": true
            }
          }
        },
        {
          "StartAt": "ExportFromLegacy",
          "States": {
            "ExportFromLegacy": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Parameters": {
                "FunctionName": "${ProcessExportLambdaArn}",
                "Payload": {
                  "jobId.$": "$.jobId",
                  "source": "legacy",
                  "filters.$": "$.filters",
                  "format": "json",
                  "maskPii.$": "$.maskPii",
                  "tempExport": true
                }
              },
              "End": true
            }
          }
        }
      ],
      "ResultPath": "$.exportResults",
      "Next": "MergeExports",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "ExportFailed",
          "ResultPath": "$.error"
        }
      ]
    },
    
    "ExportComparison": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${ProcessComparisonExportLambdaArn}",
        "Payload": {
          "jobId.$": "$.jobId",
          "filters.$": "$.filters",
          "includeConflicts": true,
          "includeSyncStatus": true,
          "format.$": "$.format"
        }
      },
      "ResultPath": "$.result",
      "Next": "ProcessingComplete",
      "Retry": [
        {
          "ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException"],
          "IntervalSeconds": 10,
          "MaxAttempts": 2,
          "BackoffRate": 2.0
        }
      ],
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "ExportFailed",
          "ResultPath": "$.error"
        }
      ]
    },
    
    "MergeExports": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${MergeExportLambdaArn}",
        "Payload": {
          "jobId.$": "$.jobId",
          "cloudExportResult.$": "$.exportResults[0]",
          "legacyExportResult.$": "$.exportResults[1]",
          "format.$": "$.format",
          "deduplication": true,
          "sortBy": "uid",
          "includeSourceColumn": true
        }
      },
      "ResultPath": "$.result",
      "Next": "ProcessingComplete",
      "Retry": [
        {
          "ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException"],
          "IntervalSeconds": 5,
          "MaxAttempts": 2,
          "BackoffRate": 2.0
        }
      ],
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "ExportFailed",
          "ResultPath": "$.error"
        }
      ]
    },
    
    "ExportFailed": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName": "${MigrationJobsTable}",
        "Key": {
          "job_id": {
            "S.$": "$.jobId"
          }
        },
        "UpdateExpression": "SET job_status = :status, finished_at = :timestamp, error_message = :error",
        "ExpressionAttributeValues": {
          ":status": {"S": "FAILED"},
          ":timestamp": {"S.$": "$$.State.EnteredTime"},
          ":error": {"S.$": "$.error.Cause"}
        }
      },
      "End": true
    },
    
    "ProcessingComplete": {
      "Type": "Task",
      "Resource": "arn:aws:states:::dynamodb:updateItem",
      "Parameters": {
        "TableName": "${MigrationJobsTable}",
        "Key": {
          "job_id": {
            "S.$": "$.jobId"
          }
        },
        "UpdateExpression": "SET job_status = :status, finished_at = :timestamp, processed_records = :processed, output_file_key = :output, download_url = :download",
        "ExpressionAttributeValues": {
          ":status": {"S": "COMPLETED"},
          ":timestamp": {"S.$": "$$.State.EnteredTime"},
          ":processed": {"N.$": "States.JsonToString($.result.Payload.exportedRecords)"},
          ":output": {"S.$": "$.result.Payload.outputFileKey"},
          ":download": {"S.$": "$.result.Payload.downloadUrl"}
        }
      },
      "End": true
    }
  }
}
name: ðŸ§ª Smoke Tests

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      function_name:
        required: true
        type: string
      api_url:
        required: false
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test'
        required: true
        default: 'dev'
        type: choice
        options: ['dev', 'stage', 'prod']
      function_name:
        description: 'Lambda function name'
        required: true
        default: 'subscriber-migration-portal-main-BackendLambda-prod'
      api_url:
        description: 'API Gateway URL (optional)'
        required: false
        default: ''

env:
  AWS_REGION: us-east-1

jobs:
  lambda-tests:
    name: Lambda Function Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Verify Function Exists
        shell: bash
        run: |
          FUNCTION_NAME="${{ inputs.function_name || secrets.LAMBDA_BACKEND_NAME }}"
          echo "Checking if function exists: $FUNCTION_NAME"
          if aws lambda get-function --function-name "$FUNCTION_NAME" >/dev/null 2>&1; then
            echo "Function exists and is accessible"
            aws lambda get-function --function-name "$FUNCTION_NAME" \
              --query 'Configuration.{Handler:Handler,Runtime:Runtime,State:State,LastUpdateStatus:LastUpdateStatus}' \
              --output table
          else
            echo "Function not found or not accessible: $FUNCTION_NAME"
            exit 1
          fi
      
      - name: Test 1 - Empty Event Handling
        shell: bash
        run: |
          FUNCTION_NAME="${{ inputs.function_name || secrets.LAMBDA_BACKEND_NAME }}"
          aws lambda invoke --function-name "$FUNCTION_NAME" --payload '{}' --cli-binary-format raw-in-base64-out response-empty.json
          STATUS_CODE=$(jq -r '.statusCode // "N/A"' response-empty.json)
          echo "Status Code: $STATUS_CODE"
          if [ "$STATUS_CODE" != "200" ]; then
            echo "Empty event test failed"
            cat response-empty.json
            exit 1
          fi
      
      - name: Test 2 - Health Check API
        shell: bash
        run: |
          FUNCTION_NAME="${{ inputs.function_name || secrets.LAMBDA_BACKEND_NAME }}"
          cat > health-event.json << 'EOF'
          {
            "httpMethod": "GET",
            "path": "/api/health",
            "headers": {"Content-Type": "application/json"},
            "queryStringParameters": null,
            "body": null,
            "isBase64Encoded": false
          }
          EOF
          aws lambda invoke --function-name "$FUNCTION_NAME" --payload file://health-event.json --cli-binary-format raw-in-base64-out response-health.json
          STATUS_CODE=$(jq -r '.statusCode // "N/A"' response-health.json)
          echo "Status Code: $STATUS_CODE"
          if [ "$STATUS_CODE" != "200" ]; then
            echo "Health API test failed"
            cat response-health.json
            exit 1
          fi
      
      - name: Test 3 - Auth Endpoint
        shell: bash
        run: |
          FUNCTION_NAME="${{ inputs.function_name || secrets.LAMBDA_BACKEND_NAME }}"
          cat > auth-event.json << 'EOF'
          {
            "httpMethod": "POST",
            "path": "/api/auth/login",
            "headers": {"Content-Type": "application/json"},
            "body": "{\"username\":\"admin\",\"password\":\"Admin@123\"}",
            "isBase64Encoded": false
          }
          EOF
          aws lambda invoke --function-name "$FUNCTION_NAME" --payload file://auth-event.json --cli-binary-format raw-in-base64-out response-auth.json
          STATUS_CODE=$(jq -r '.statusCode // "N/A"' response-auth.json)
          echo "Auth endpoint status: $STATUS_CODE"
          if [[ ! "$STATUS_CODE" =~ ^(200|400|401|500)$ ]]; then
            echo "Auth endpoint returned unexpected status"
            cat response-auth.json
            exit 1
          fi
  
  api-gateway-tests:
    name: API Gateway Tests
    runs-on: ubuntu-latest
    if: inputs.api_url != ''
    steps:
      - name: Test API Gateway Health
        shell: bash
        run: |
          API_URL="${{ inputs.api_url }}"
          if [ -z "$API_URL" ]; then
            echo "No API URL provided, skipping API Gateway tests"
            exit 0
          fi
          RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" "$API_URL/api/health" || echo "HTTPSTATUS:000")
          HTTP_STATUS=$(echo $RESPONSE | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')
          if [ "$HTTP_STATUS" != "200" ]; then
            echo "API Gateway health check returned: $HTTP_STATUS"
          fi
  
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lambda-tests]
    steps:
      - name: Test Critical API Endpoints
        shell: bash
        run: |
          FUNCTION_NAME="${{ inputs.function_name || secrets.LAMBDA_BACKEND_NAME }}"
          ENDPOINTS=(
            "/api/health:GET"
            "/api/auth/login:POST"
            "/api/dashboard/stats:GET"
            "/api/subscribers:GET"
            "/api/migration/jobs:GET"
            "/api/analytics:GET"
            "/api/config/provisioning-mode:GET"
          )
          PASSED=0
          FAILED=0
          for endpoint_method in "${ENDPOINTS[@]}"; do
            IFS=':' read -r endpoint method <<< "$endpoint_method"
            cat > test-event.json << EOF
          {
            "httpMethod": "$method",
            "path": "$endpoint",
            "headers": {"Content-Type": "application/json"},
            "body": null,
            "queryStringParameters": null
          }
          EOF
            aws lambda invoke --function-name "$FUNCTION_NAME" --payload file://test-event.json --cli-binary-format raw-in-base64-out response-integration.json >/dev/null 2>&1
            STATUS_CODE=$(jq -r '.statusCode // "N/A"' response-integration.json 2>/dev/null || echo "N/A")
            if [[ "$STATUS_CODE" =~ ^(200|401|403)$ ]]; then
              ((PASSED++))
            else
              ((FAILED++))
            fi
          done
          echo "Passed: $PASSED Failed: $FAILED"
          if [ $FAILED -gt 0 ]; then
            echo "$FAILED integration tests failed"; fi
  
  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [lambda-tests, api-gateway-tests, integration-tests]
    if: always()
    steps:
      - name: Generate Test Summary
        shell: bash
        run: |
          echo "Smoke Test Summary for ${{ inputs.environment }}"
          echo "Function: ${{ inputs.function_name || secrets.LAMBDA_BACKEND_NAME }}"
          echo "API URL: ${{ inputs.api_url }}"
          echo "Lambda Tests: ${{ needs.lambda-tests.result }}"
          echo "API Gateway Tests: ${{ needs.api-gateway-tests.result }}"
          echo "Integration Tests: ${{ needs.integration-tests.result }}"
          if [ "${{ needs.lambda-tests.result }}" = "success" ] && [ "${{ needs.integration-tests.result }}" = "success" ]; then
            echo "SMOKE TESTS PASSED"
          else
            echo "SOME TESTS FAILED"; exit 1; fi

AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Subscriber Migration Portal - Complete System with Step Functions Orchestration'

Parameters:
  Stage:
    Type: String
    Default: 'prod'
    AllowedValues: ['prod']
  CorsOrigins:
    Type: String
    Default: 'https://yourdomain.com'
  JwtSecret:
    Type: String
    NoEcho: true

Globals:
  Function:
    Timeout: 30
    MemorySize: 512
    Runtime: python3.11
    Layers:
      - !Ref CommonLayer
    Environment:
      Variables:
        STAGE: !Ref Stage
        CORS_ORIGINS: !Ref CorsOrigins

Resources:
  # ======================
  # LAMBDA LAYER
  # ======================
  CommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub '${AWS::StackName}-common'
      Description: 'Common utilities and dependencies'
      ContentUri: lambda/layers/common/
      CompatibleRuntimes:
        - python3.11
      RetentionPolicy: Delete

  # ======================
  # S3 BUCKETS
  # ======================
  UploadsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AWS::StackName}-uploads'
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: DeleteIncompleteMultipartUploads
            Status: Enabled
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
          - Id: DeleteOldUploads
            Status: Enabled
            ExpirationInDays: 30
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt ProcessFileFunction.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: uploads/

  # ======================
  # DYNAMODB TABLES
  # ======================
  SubscribersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-subscribers'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: uid
          AttributeType: S
        - AttributeName: status
          AttributeType: S
        - AttributeName: plan_id
          AttributeType: S
      KeySchema:
        - AttributeName: uid
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: status-index
          KeySchema:
            - AttributeName: status
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: plan-index
          KeySchema:
            - AttributeName: plan_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      SSESpecification:
        SSEEnabled: true

  SettingsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-settings'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: sk
          AttributeType: S
      KeySchema:
        - AttributeName: sk
          KeyType: HASH
      SSESpecification:
        SSEEnabled: true

  MigrationJobsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-migration-jobs'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: job_id
          AttributeType: S
        - AttributeName: job_type
          AttributeType: S
        - AttributeName: created_at
          AttributeType: S
      KeySchema:
        - AttributeName: job_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: job-type-index
          KeySchema:
            - AttributeName: job_type
              KeyType: HASH
            - AttributeName: created_at
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      SSESpecification:
        SSEEnabled: true

  # ======================
  # RDS RESOURCES
  # ======================
  LegacyDbSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub '${AWS::StackName}-legacy-db'
      Description: 'Credentials for Legacy RDS MySQL'
      GenerateSecretString:
        SecretStringTemplate: '{"username":"admin","dbname":"legacydb"}'
        GenerateStringKey: 'password'
        PasswordLength: 24
        ExcludeCharacters: '"@/\\'

  LegacyDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub '${AWS::StackName}-legacy'
      Engine: mysql
      EngineVersion: '8.0'
      DBInstanceClass: db.t4g.micro
      AllocatedStorage: 20
      PubliclyAccessible: true  # TODO: Move to private VPC in Step 4
      MasterUsername: !Sub '{{resolve:secretsmanager:${LegacyDbSecret}::username}}'
      MasterUserPassword: !Sub '{{resolve:secretsmanager:${LegacyDbSecret}::password}}'
      DBName: !Sub '{{resolve:secretsmanager:${LegacyDbSecret}::dbname}}'
      DeletionProtection: false
      BackupRetentionPeriod: 1
      StorageType: gp2
      MultiAZ: false
      Tags:
        - Key: Service
          Value: SubscriberPortal
        - Key: Environment
          Value: !Ref Stage

  # ======================
  # IAM ROLES FOR STEP FUNCTIONS
  # ======================
  StepFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: states.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
      Policies:
        - PolicyName: StepFunctionExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: 
                  - !Sub '${ProcessFileFunction.Arn}*'
                  - !Sub '${ProcessAuditFunction.Arn}*'
                  - !Sub '${ProcessExportFunction.Arn}*'
                  - !Sub '${ValidateJobFunction.Arn}*'
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource: !GetAtt MigrationJobsTable.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  # ======================
  # STEP FUNCTIONS
  # ======================
  MigrationWorkflow:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub '${AWS::StackName}-migration-workflow'
      DefinitionS3Location:
        Bucket: !Ref UploadsBucket
        Key: stepfunctions/migration-workflow.json
      DefinitionSubstitutions:
        ValidateJobLambdaArn: !GetAtt ValidateJobFunction.Arn
        ProcessMigrationLambdaArn: !GetAtt ProcessFileFunction.Arn
        ProcessBulkDeleteLambdaArn: !GetAtt ProcessFileFunction.Arn
        ProcessAuditLambdaArn: !GetAtt ProcessAuditFunction.Arn
        MergeExportLambdaArn: !GetAtt ProcessExportFunction.Arn
        MigrationJobsTable: !Ref MigrationJobsTable
      RoleArn: !GetAtt StepFunctionExecutionRole.Arn
      LoggingConfiguration:
        Level: ERROR
        IncludeExecutionData: false
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !Sub '${StepFunctionLogGroup.Arn}:*'

  AuditWorkflow:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub '${AWS::StackName}-audit-workflow'
      DefinitionS3Location:
        Bucket: !Ref UploadsBucket
        Key: stepfunctions/audit-workflow.json
      DefinitionSubstitutions:
        ProcessAuditLambdaArn: !GetAtt ProcessAuditFunction.Arn
        GenerateAuditReportLambdaArn: !GetAtt ProcessExportFunction.Arn
        MigrationJobsTable: !Ref MigrationJobsTable
      RoleArn: !GetAtt StepFunctionExecutionRole.Arn
      LoggingConfiguration:
        Level: ERROR
        IncludeExecutionData: false
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !Sub '${StepFunctionLogGroup.Arn}:*'

  ExportWorkflow:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      StateMachineName: !Sub '${AWS::StackName}-export-workflow'
      DefinitionS3Location:
        Bucket: !Ref UploadsBucket
        Key: stepfunctions/export-workflow.json
      DefinitionSubstitutions:
        ProcessExportLambdaArn: !GetAtt ProcessExportFunction.Arn
        ProcessComparisonExportLambdaArn: !GetAtt ProcessExportFunction.Arn
        MergeExportLambdaArn: !GetAtt ProcessExportFunction.Arn
        MigrationJobsTable: !Ref MigrationJobsTable
      RoleArn: !GetAtt StepFunctionExecutionRole.Arn
      LoggingConfiguration:
        Level: ERROR
        IncludeExecutionData: false
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !Sub '${StepFunctionLogGroup.Arn}:*'

  StepFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/stepfunctions/${AWS::StackName}'
      RetentionInDays: 30

  # ======================
  # LAMBDA FUNCTIONS
  # ======================
  
  # Main Orchestrator Function
  OrchestratorFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/migration/
      Handler: orchestrator.lambda_handler
      Timeout: 60
      Environment:
        Variables:
          MIGRATION_JOBS_TABLE: !Ref MigrationJobsTable
          UPLOADS_BUCKET: !Ref UploadsBucket
          MIGRATION_WORKFLOW_ARN: !Ref MigrationWorkflow
          AUDIT_WORKFLOW_ARN: !Ref AuditWorkflow
          EXPORT_WORKFLOW_ARN: !Ref ExportWorkflow
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MigrationJobsTable
        - S3CrudPolicy:
            BucketName: !Ref UploadsBucket
        - Statement:
            - Effect: Allow
              Action:
                - states:StartExecution
                - states:DescribeExecution
                - states:StopExecution
              Resource:
                - !Ref MigrationWorkflow
                - !Ref AuditWorkflow
                - !Ref ExportWorkflow
      Events:
        # Upload endpoints
        UploadRequest:
          Type: Api
          Properties:
            Path: /migration/upload
            Method: POST
            Auth:
              Authorizer: NONE
        
        # Job creation endpoints
        CreateMigrationJob:
          Type: Api
          Properties:
            Path: /migration/jobs
            Method: POST
            Auth:
              Authorizer: NONE
        CreateAuditJob:
          Type: Api
          Properties:
            Path: /audit/jobs
            Method: POST
            Auth:
              Authorizer: NONE
        CreateExportJob:
          Type: Api
          Properties:
            Path: /export/jobs
            Method: POST
            Auth:
              Authorizer: NONE
        
        # Job management endpoints
        GetJobStatus:
          Type: Api
          Properties:
            Path: /jobs/{id}
            Method: GET
            Auth:
              Authorizer: NONE
        CancelJob:
          Type: Api
          Properties:
            Path: /jobs/{id}/cancel
            Method: POST
            Auth:
              Authorizer: NONE
        ListJobs:
          Type: Api
          Properties:
            Path: /jobs
            Method: GET
            Auth:
              Authorizer: NONE

  # Job Processing Functions
  ValidateJobFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/migration/
      Handler: validate_job.lambda_handler
      Environment:
        Variables:
          UPLOADS_BUCKET: !Ref UploadsBucket
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref UploadsBucket

  ProcessFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/migration/
      Handler: process_file.lambda_handler
      Timeout: 900  # 15 minutes for large files
      MemorySize: 1024
      Environment:
        Variables:
          SUBSCRIBERS_TABLE: !Ref SubscribersTable
          MIGRATION_JOBS_TABLE: !Ref MigrationJobsTable
          UPLOADS_BUCKET: !Ref UploadsBucket
          LEGACY_DB_SECRET_ARN: !Ref LegacyDbSecret
          LEGACY_DB_HOST: !GetAtt LegacyDB.Endpoint.Address
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SubscribersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref MigrationJobsTable
        - S3CrudPolicy:
            BucketName: !Ref UploadsBucket
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref LegacyDbSecret
      Events:
        FileUpload:
          Type: S3
          Properties:
            Bucket: !Ref UploadsBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: uploads/

  ProcessAuditFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/migration/
      Handler: process_audit.lambda_handler
      Timeout: 600  # 10 minutes for audits
      Environment:
        Variables:
          SUBSCRIBERS_TABLE: !Ref SubscribersTable
          MIGRATION_JOBS_TABLE: !Ref MigrationJobsTable
          UPLOADS_BUCKET: !Ref UploadsBucket
          LEGACY_DB_SECRET_ARN: !Ref LegacyDbSecret
          LEGACY_DB_HOST: !GetAtt LegacyDB.Endpoint.Address
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref SubscribersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref MigrationJobsTable
        - S3CrudPolicy:
            BucketName: !Ref UploadsBucket
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref LegacyDbSecret

  ProcessExportFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/migration/
      Handler: process_export.lambda_handler
      Timeout: 600  # 10 minutes for exports
      Environment:
        Variables:
          SUBSCRIBERS_TABLE: !Ref SubscribersTable
          MIGRATION_JOBS_TABLE: !Ref MigrationJobsTable
          UPLOADS_BUCKET: !Ref UploadsBucket
          LEGACY_DB_SECRET_ARN: !Ref LegacyDbSecret
          LEGACY_DB_HOST: !GetAtt LegacyDB.Endpoint.Address
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref SubscribersTable
        - DynamoDBCrudPolicy:
            TableName: !Ref MigrationJobsTable
        - S3CrudPolicy:
            BucketName: !Ref UploadsBucket
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref LegacyDbSecret

  # Settings Function
  SettingsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/settings/
      Handler: handler.lambda_handler
      Environment:
        Variables:
          SETTINGS_TABLE: !Ref SettingsTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SettingsTable
      Events:
        GetMode:
          Type: Api
          Properties:
            Path: /settings/provisioning-mode
            Method: GET
            Auth:
              Authorizer: NONE
        PutMode:
          Type: Api
          Properties:
            Path: /settings/provisioning-mode
            Method: PUT
            Auth:
              Authorizer: NONE

  # Cloud Subscribers Function (DynamoDB)
  CloudSubscribersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/cloud/
      Handler: subscribers.lambda_handler
      Environment:
        Variables:
          SUBSCRIBERS_TABLE: !Ref SubscribersTable
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SubscribersTable
      Events:
        ListCloudSubscribers:
          Type: Api
          Properties:
            Path: /cloud/subscribers
            Method: GET
            Auth:
              Authorizer: NONE
        CreateCloudSubscriber:
          Type: Api
          Properties:
            Path: /cloud/subscribers
            Method: POST
            Auth:
              Authorizer: NONE
        GetCloudSubscriber:
          Type: Api
          Properties:
            Path: /cloud/subscribers/{uid}
            Method: GET
            Auth:
              Authorizer: NONE
        UpdateCloudSubscriber:
          Type: Api
          Properties:
            Path: /cloud/subscribers/{uid}
            Method: PUT
            Auth:
              Authorizer: NONE
        DeleteCloudSubscriber:
          Type: Api
          Properties:
            Path: /cloud/subscribers/{uid}
            Method: DELETE
            Auth:
              Authorizer: NONE

  # Legacy Subscribers Function (RDS MySQL)
  LegacySubscribersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/legacy/
      Handler: subscribers.lambda_handler
      Timeout: 60
      Environment:
        Variables:
          LEGACY_DB_SECRET_ARN: !Ref LegacyDbSecret
          LEGACY_DB_HOST: !GetAtt LegacyDB.Endpoint.Address
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref LegacyDbSecret
            - Effect: Allow
              Action:
                - rds:DescribeDBInstances
              Resource: !Sub 'arn:aws:rds:${AWS::Region}:${AWS::AccountId}:db:${LegacyDB}'
      Events:
        ListLegacySubscribers:
          Type: Api
          Properties:
            Path: /legacy/subscribers
            Method: GET
            Auth:
              Authorizer: NONE
        CreateLegacySubscriber:
          Type: Api
          Properties:
            Path: /legacy/subscribers
            Method: POST
            Auth:
              Authorizer: NONE
        GetLegacySubscriber:
          Type: Api
          Properties:
            Path: /legacy/subscribers/{uid}
            Method: GET
            Auth:
              Authorizer: NONE
        UpdateLegacySubscriber:
          Type: Api
          Properties:
            Path: /legacy/subscribers/{uid}
            Method: PUT
            Auth:
              Authorizer: NONE
        DeleteLegacySubscriber:
          Type: Api
          Properties:
            Path: /legacy/subscribers/{uid}
            Method: DELETE
            Auth:
              Authorizer: NONE

  # Dual Provision Function (Both systems)
  DualSubscribersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/dual/
      Handler: subscribers.lambda_handler
      Timeout: 90
      Environment:
        Variables:
          SUBSCRIBERS_TABLE: !Ref SubscribersTable
          LEGACY_DB_SECRET_ARN: !Ref LegacyDbSecret
          LEGACY_DB_HOST: !GetAtt LegacyDB.Endpoint.Address
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SubscribersTable
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource: !Ref LegacyDbSecret
            - Effect: Allow
              Action:
                - rds:DescribeDBInstances
              Resource: !Sub 'arn:aws:rds:${AWS::Region}:${AWS::AccountId}:db:${LegacyDB}'
      Events:
        ListDualSubscribers:
          Type: Api
          Properties:
            Path: /dual/subscribers
            Method: GET
            Auth:
              Authorizer: NONE
        CreateDualSubscriber:
          Type: Api
          Properties:
            Path: /dual/subscribers
            Method: POST
            Auth:
              Authorizer: NONE
        GetDualSubscriber:
          Type: Api
          Properties:
            Path: /dual/subscribers/{uid}
            Method: GET
            Auth:
              Authorizer: NONE
        UpdateDualSubscriber:
          Type: Api
          Properties:
            Path: /dual/subscribers/{uid}
            Method: PUT
            Auth:
              Authorizer: NONE
        DeleteDualSubscriber:
          Type: Api
          Properties:
            Path: /dual/subscribers/{uid}
            Method: DELETE
            Auth:
              Authorizer: NONE
        GetSyncStatus:
          Type: Api
          Properties:
            Path: /dual/sync-status
            Method: GET
            Auth:
              Authorizer: NONE
        SyncSubscriber:
          Type: Api
          Properties:
            Path: /dual/subscribers/{uid}/sync
            Method: POST
            Auth:
              Authorizer: NONE

  # ======================
  # EXISTING FUNCTIONS (Health, Auth, etc.)
  # ======================
  
  HealthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/health/
      Handler: handler.lambda_handler
      Events:
        HealthCheck:
          Type: Api
          Properties:
            Path: /health
            Method: GET
            Auth:
              Authorizer: NONE

  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: lambda/auth/
      Handler: handler.lambda_handler
      Environment:
        Variables:
          JWT_SECRET: !Ref JwtSecret
      Events:
        Login:
          Type: Api
          Properties:
            Path: /auth/login
            Method: POST
            Auth:
              Authorizer: NONE

  # S3 Bucket Permission for Lambda
  ProcessFileFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ProcessFileFunction.Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub '${UploadsBucket}/*'

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}'
    
  UploadsBucketName:
    Description: S3 bucket for file uploads
    Value: !Ref UploadsBucket
    
  MigrationJobsTableName:
    Description: DynamoDB table for job tracking
    Value: !Ref MigrationJobsTable
    
  SubscribersTableName:
    Description: DynamoDB Subscribers table name
    Value: !Ref SubscribersTable
    
  SettingsTableName:
    Description: DynamoDB Settings table name
    Value: !Ref SettingsTable
    
  LegacyDbSecretArn:
    Description: Secret ARN for Legacy RDS credentials
    Value: !Ref LegacyDbSecret
    
  LegacyDbHost:
    Description: Legacy RDS endpoint hostname
    Value: !GetAtt LegacyDB.Endpoint.Address
    
  MigrationWorkflowArn:
    Description: Migration Step Function ARN
    Value: !Ref MigrationWorkflow
    
  AuditWorkflowArn:
    Description: Audit Step Function ARN
    Value: !Ref AuditWorkflow
    
  ExportWorkflowArn:
    Description: Export Step Function ARN
    Value: !Ref ExportWorkflow

  # Job Management API Endpoints
  JobManagementEndpoints:
    Description: Job management API endpoints
    Value: !Sub |
      Upload: POST https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/migration/upload
      Migration Jobs: POST https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/migration/jobs
      Audit Jobs: POST https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/audit/jobs
      Export Jobs: POST https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/export/jobs
      Job Status: GET https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/jobs/{id}
      Cancel Job: POST https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/jobs/{id}/cancel
      List Jobs: GET https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/jobs
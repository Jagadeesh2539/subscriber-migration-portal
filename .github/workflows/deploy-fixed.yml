name: Deploy Enhanced Portal (Fixed)

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deploy all components'
        required: false
        default: 'false'
        type: boolean

env:
  AWS_DEFAULT_REGION: us-east-1
  FRONTEND_BUCKET: subscriber-migration-stack-prod-frontend
  BACKEND_LAMBDA: subscriber-migration-stack-prod-BackendLambda-pw0yiCxXyN3J
  API_GATEWAY_ID: hsebznxeu6

jobs:
  deploy-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Install and build frontend (fixed)
        run: |
          cd frontend
          echo "üîß Installing dependencies..."
          
          # Delete package-lock.json to avoid conflicts
          rm -f package-lock.json
          
          # Clear npm cache
          npm cache clean --force
          
          # Install dependencies with npm install (not npm ci)
          npm install
          
          # Set production environment
          echo "REACT_APP_API_BASE_URL=https://${{ env.API_GATEWAY_ID }}.execute-api.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com/prod" > .env.production
          echo "REACT_APP_VERSION=2.0.0-enhanced" >> .env.production
          echo "REACT_APP_LEGACY_ENABLED=true" >> .env.production
          
          echo "üèóÔ∏è Building enhanced frontend..."
          npm run build
          
          echo "‚úÖ Frontend build completed"

      - name: Deploy frontend to S3
        run: |
          cd frontend
          echo "üöÄ Deploying to S3..."
          
          # Clear existing files
          aws s3 rm s3://${{ env.FRONTEND_BUCKET }}/ --recursive
          
          # Deploy new build
          aws s3 sync build/ s3://${{ env.FRONTEND_BUCKET }}/ \
            --delete \
            --cache-control "public, max-age=0, must-revalidate"
          
          echo "‚úÖ Frontend deployed"

  deploy-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Package production backend
        run: |
          cd backend
          echo "üì¶ Packaging production backend..."
          
          # Install all dependencies
          pip install --no-cache-dir -r requirements.txt -t .
          
          # Use production backend with legacy integration
          cp app_production_ready.py lambda_function.py
          
          # Include legacy database client
          cp legacy_db_enhanced.py .
          
          echo "üóúÔ∏è Creating deployment package..."
          zip -r ../enhanced-backend.zip . \
            -x "*.pyc" "__pycache__/*" "*.git*" \
               "app.py" "app_enhanced.py" "app_enterprise.py" \
               "*.md" "Dockerfile" ".gitignore" \
               "setup_legacy_schema.py" "*.log"
          
          cd ..
          echo "üìä Package size: $(du -sh enhanced-backend.zip | cut -f1)"
          echo "‚úÖ Backend packaged"

      - name: Deploy to Lambda
        run: |
          echo "üöÄ Deploying to AWS Lambda..."
          
          # Update Lambda function code
          aws lambda update-function-code \
            --function-name ${{ env.BACKEND_LAMBDA }} \
            --zip-file fileb://enhanced-backend.zip \
            --region ${{ env.AWS_DEFAULT_REGION }}
          
          echo "‚è≥ Waiting for deployment..."
          aws lambda wait function-updated \
            --function-name ${{ env.BACKEND_LAMBDA }} \
            --region ${{ env.AWS_DEFAULT_REGION }}
          
          echo "‚öôÔ∏è Updating environment variables..."
          aws lambda update-function-configuration \
            --function-name ${{ env.BACKEND_LAMBDA }} \
            --environment '{
              "Variables": {
                "SUBSCRIBER_TABLE_NAME": "subscriber-table",
                "AUDIT_LOG_TABLE_NAME": "audit-log-table",
                "MIGRATION_JOBS_TABLE_NAME": "migration-jobs-table",
                "MIGRATION_UPLOAD_BUCKET_NAME": "subscriber-migration-stack-prod-migration-uploads",
                "LEGACY_DB_SECRET_ARN": "arn:aws:secretsmanager:us-east-1:144395889420:secret:subscriber-legacy-db-secret-qWXjZz",
                "LEGACY_DB_HOST": "subscriber-migration-legacydb.cwd6wssgy4kr.us-east-1.rds.amazonaws.com",
                "LEGACY_DB_PORT": "3306",
                "LEGACY_DB_NAME": "legacydb",
                "FLASK_ENV": "production",
                "VERSION": "2.0.0-production-ready"
              }
            }' \
            --region ${{ env.AWS_DEFAULT_REGION }}
          
          aws lambda wait function-updated \
            --function-name ${{ env.BACKEND_LAMBDA }} \
            --region ${{ env.AWS_DEFAULT_REGION }}
          
          echo "‚úÖ Backend deployed with legacy integration"

      - name: Update API Gateway
        run: |
          echo "üîÑ Updating API Gateway..."
          
          DEPLOYMENT_ID=$(aws apigateway create-deployment \
            --rest-api-id ${{ env.API_GATEWAY_ID }} \
            --description "Enhanced Portal $(date +%Y%m%d-%H%M%S)" \
            --query 'id' --output text \
            --region ${{ env.AWS_DEFAULT_REGION }})
          
          aws apigateway update-stage \
            --rest-api-id ${{ env.API_GATEWAY_ID }} \
            --stage-name prod \
            --patch-operations op=replace,path=/deploymentId,value=$DEPLOYMENT_ID \
            --region ${{ env.AWS_DEFAULT_REGION }}
          
          echo "‚úÖ API Gateway updated"

  test-deployment:
    runs-on: ubuntu-latest
    needs: [deploy-frontend, deploy-backend]
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Test deployment
        run: |
          API_URL="https://${{ env.API_GATEWAY_ID }}.execute-api.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com/prod"
          FRONTEND_URL="http://${{ env.FRONTEND_BUCKET }}.s3-website-${{ env.AWS_DEFAULT_REGION }}.amazonaws.com"
          
          echo "üß™ Testing enhanced portal deployment..."
          
          # Wait for propagation
          echo "‚è≥ Waiting 60s for AWS propagation..."
          sleep 60
          
          # Test API
          echo "1Ô∏è‚É£ API Health:"
          API_HEALTH=$(curl -s "$API_URL/api/health" | jq -r '.status' 2>/dev/null || echo "error")
          echo "   Status: $API_HEALTH"
          
          # Test Legacy DB
          echo "2Ô∏è‚É£ Legacy Database:"
          LEGACY_STATUS=$(curl -s "$API_URL/api/legacy/test" | jq -r '.status' 2>/dev/null || echo "error")
          echo "   Status: $LEGACY_STATUS"
          
          # Test Authentication
          echo "3Ô∏è‚É£ Authentication:"
          AUTH_TEST=$(curl -s -X POST "$API_URL/api/auth/login" \
            -H "Content-Type: application/json" \
            -d '{"username":"admin","password":"Admin@123"}' \
            | jq -r '.user.role' 2>/dev/null || echo "error")
          echo "   Login: $AUTH_TEST"
          
          # Test Frontend
          echo "4Ô∏è‚É£ Frontend:"
          FRONTEND_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$FRONTEND_URL")
          echo "   Status: $FRONTEND_STATUS"
          
          # Summary
          echo ""
          echo "üìã DEPLOYMENT SUMMARY:"
          echo "   üîó API: $([ "$API_HEALTH" = "healthy" ] && echo "‚úÖ Healthy" || echo "‚ö†Ô∏è $API_HEALTH")"
          echo "   üóÑÔ∏è Legacy DB: $([ "$LEGACY_STATUS" = "connected" ] && echo "‚úÖ Connected" || echo "‚ö†Ô∏è $LEGACY_STATUS")"
          echo "   üîê Auth: $([ "$AUTH_TEST" = "admin" ] && echo "‚úÖ Working" || echo "‚ö†Ô∏è $AUTH_TEST")"
          echo "   üåê Frontend: $([ "$FRONTEND_STATUS" = "200" ] && echo "‚úÖ Live" || echo "‚ö†Ô∏è $FRONTEND_STATUS")"
          echo ""
          if [ "$API_HEALTH" = "healthy" ] && [ "$FRONTEND_STATUS" = "200" ]; then
            echo "üéâ ENHANCED PORTAL IS LIVE!"
            echo "üåê URL: $FRONTEND_URL"
            echo "üîê Login: admin/Admin@123"
            echo "‚ú® Features: Legacy/Cloud/Dual Provisioning, Job Controls, Bulk Operations"
          else
            echo "‚ö†Ô∏è Partial deployment - check individual components above"
          fi
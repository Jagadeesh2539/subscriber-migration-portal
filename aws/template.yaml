AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Subscriber Migration Portal - Step Functions with decoupled IAM to avoid cycles'

Parameters:
  Stage:
    Type: String
    Default: 'prod'
  CorsOrigins:
    Type: String
    Default: 'https://yourdomain.com'
  JwtSecret:
    Type: String
    NoEcho: true

Globals:
  Function:
    Timeout: 30
    MemorySize: 512
    Runtime: python3.11
    Environment:
      Variables:
        STAGE: !Ref Stage
        CORS_ORIGINS: !Ref CorsOrigins
        AWS_STACK_NAME: !Sub '${AWS::StackName}'
  Api:
    Cors:
      AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: !Sub "'${CorsOrigins}'"
      MaxAge: "'600'"

Resources:
  UploadsBucket:
    Type: AWS::S3::Bucket

  SubscribersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - {AttributeName: uid, AttributeType: S}
      KeySchema:
        - {AttributeName: uid, KeyType: HASH}

  SettingsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - {AttributeName: sk, AttributeType: S}
      KeySchema:
        - {AttributeName: sk, KeyType: HASH}

  MigrationJobsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - {AttributeName: job_id, AttributeType: S}
      KeySchema:
        - {AttributeName: job_id, KeyType: HASH}

  # 1) Create roles with only assume role policy (no inline policies here)
  StepFunctionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: states.amazonaws.com }
            Action: sts:AssumeRole

  LambdaBasicRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: { Service: lambda.amazonaws.com }
            Action: sts:AssumeRole

  # 2) Create functions and state machines (no policy refs that cause cycles)
  OrchestratorFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt LambdaBasicRole.Arn
      CodeUri: lambda/migration/
      Handler: orchestrator.lambda_handler
      Environment:
        Variables:
          MIGRATION_JOBS_TABLE: !Ref MigrationJobsTable
          UPLOADS_BUCKET: !Ref UploadsBucket
      Events:
        UploadRequest: { Type: Api, Properties: { Path: /migration/upload, Method: POST } }
        CreateMigrationJob: { Type: Api, Properties: { Path: /migration/jobs, Method: POST } }
        CreateAuditJob: { Type: Api, Properties: { Path: /audit/jobs, Method: POST } }
        CreateExportJob: { Type: Api, Properties: { Path: /export/jobs, Method: POST } }
        GetJobStatus: { Type: Api, Properties: { Path: /jobs/{id}, Method: GET } }
        CancelJob: { Type: Api, Properties: { Path: /jobs/{id}/cancel, Method: POST } }
        ListJobs: { Type: Api, Properties: { Path: /jobs, Method: GET } }

  ValidateJobFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt LambdaBasicRole.Arn
      CodeUri: lambda/migration/
      Handler: validate_job.lambda_handler
      Environment:
        Variables:
          UPLOADS_BUCKET: !Ref UploadsBucket

  ProcessFileFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt LambdaBasicRole.Arn
      CodeUri: lambda/migration/
      Handler: process_file.lambda_handler
      Timeout: 900
      Environment:
        Variables:
          SUBSCRIBERS_TABLE: !Ref SubscribersTable
          MIGRATION_JOBS_TABLE: !Ref MigrationJobsTable
          UPLOADS_BUCKET: !Ref UploadsBucket

  ProcessAuditFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt LambdaBasicRole.Arn
      CodeUri: lambda/migration/
      Handler: process_audit.lambda_handler

  ProcessExportFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt LambdaBasicRole.Arn
      CodeUri: lambda/migration/
      Handler: process_export.lambda_handler

  SettingsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt LambdaBasicRole.Arn
      CodeUri: lambda/settings/
      Handler: handler.lambda_handler
      Environment:
        Variables:
          SETTINGS_TABLE: !Ref SettingsTable
      Events:
        GetMode: { Type: Api, Properties: { Path: /settings/provisioning-mode, Method: GET } }
        PutMode: { Type: Api, Properties: { Path: /settings/provisioning-mode, Method: PUT } }

  HealthFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt LambdaBasicRole.Arn
      CodeUri: lambda/health/
      Handler: handler.lambda_handler
      Events:
        HealthCheck: { Type: Api, Properties: { Path: /health, Method: GET } }

  AuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt LambdaBasicRole.Arn
      CodeUri: lambda/auth/
      Handler: handler.lambda_handler
      Environment:
        Variables:
          JWT_SECRET: !Ref JwtSecret
      Events:
        Login: { Type: Api, Properties: { Path: /auth/login, Method: POST } }
        VerifyToken: { Type: Api, Properties: { Path: /auth/verify, Method: POST } }
        RefreshToken: { Type: Api, Properties: { Path: /auth/refresh, Method: POST } }

  MigrationWorkflow:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StepFunctionExecutionRole.Arn
      DefinitionString: !Sub |
        {"StartAt":"Validate","States":{"Validate":{"Type":"Task","Resource":"arn:aws:states:::lambda:invoke","Parameters":{"FunctionName":"${ValidateJobFunction.Arn}","Payload.$":"$"},"Next":"Process"},"Process":{"Type":"Task","Resource":"arn:aws:states:::lambda:invoke","Parameters":{"FunctionName":"${ProcessFileFunction.Arn}","Payload.$":"$"},"End":true}}}

  AuditWorkflow:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StepFunctionExecutionRole.Arn
      DefinitionString: !Sub |
        {"StartAt":"Audit","States":{"Audit":{"Type":"Task","Resource":"arn:aws:states:::lambda:invoke","Parameters":{"FunctionName":"${ProcessAuditFunction.Arn}","Payload.$":"$"},"End":true}}}

  ExportWorkflow:
    Type: AWS::StepFunctions::StateMachine
    Properties:
      RoleArn: !GetAtt StepFunctionExecutionRole.Arn
      DefinitionString: !Sub |
        {"StartAt":"Export","States":{"Export":{"Type":"Task","Resource":"arn:aws:states:::lambda:invoke","Parameters":{"FunctionName":"${ProcessExportFunction.Arn}","Payload.$":"$"},"End":true}}}

  # 3) Attach permissions after all resources exist (separate IAM Policy resources)
  StepFunctionInvokeLambdaPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: StepFunctionInvokeLambdaPolicy
      Roles: [ !Ref StepFunctionExecutionRole ]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: [ 'lambda:InvokeFunction' ]
            Resource:
              - !GetAtt ValidateJobFunction.Arn
              - !GetAtt ProcessFileFunction.Arn
              - !GetAtt ProcessAuditFunction.Arn
              - !GetAtt ProcessExportFunction.Arn

  StepFunctionDynamoPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: StepFunctionDynamoPolicy
      Roles: [ !Ref StepFunctionExecutionRole ]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: [ 'dynamodb:GetItem','dynamodb:PutItem','dynamodb:UpdateItem' ]
            Resource: !GetAtt MigrationJobsTable.Arn

  LambdaBasicExecutionPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LambdaBasicExecutionPolicy
      Roles: [ !Ref LambdaBasicRole ]
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: [ 'logs:CreateLogGroup','logs:CreateLogStream','logs:PutLogEvents' ]
            Resource: '*'
          - Effect: Allow
            Action: [ 'dynamodb:*' ]
            Resource: [ !GetAtt SubscribersTable.Arn, !GetAtt MigrationJobsTable.Arn, !GetAtt SettingsTable.Arn ]
          - Effect: Allow
            Action: [ 's3:*' ]
            Resource: '*'
          - Effect: Allow
            Action: [ 'states:StartExecution','states:DescribeExecution','states:StopExecution','cloudformation:DescribeStacks' ]
            Resource: '*'

Outputs:
  ApiEndpoint:
    Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}'
  MigrationWorkflowArn:
    Value: !Ref MigrationWorkflow
  AuditWorkflowArn:
    Value: !Ref AuditWorkflow
  ExportWorkflowArn:
    Value: !Ref ExportWorkflow
